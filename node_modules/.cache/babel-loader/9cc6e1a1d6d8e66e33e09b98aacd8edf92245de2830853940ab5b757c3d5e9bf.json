{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HELLO\\\\Desktop\\\\provernaire-game\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/App.jsx\nimport React, { useState, useEffect } from 'react';\nimport LoginPage from './pages/LoginPage';\nimport TeamSelectionPage from './pages/TeamSelectionPage';\n// You will uncomment and add these components as we build them:\n// import PreviewPage from './pages/PreviewPage';\n// import GamePage from './pages/GamePage';\n// import ResultPage from './pages/ResultPage';\n// import LeaderboardPage from './pages/LeaderboardPage';\nimport './App.css'; // Global CSS for the overall app layout/body\n\n/**\r\n * App Component\r\n * This is the main application component that handles routing/flow\r\n * between different screens based on user authentication and game state.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to hold the current user's data (username, pfpUrl, team, etc.)\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // Effect to load user data from local storage on initial app load\n  useEffect(() => {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser && storedUser.id && storedUser.username) {\n        // Basic validation\n        setCurrentUser(storedUser);\n      }\n    } catch (error) {\n      console.error(\"Failed to parse user data from localStorage:\", error);\n      localStorage.removeItem('currentUser'); // Clear invalid data\n    }\n  }, []); // Empty dependency array means this runs once on mount\n\n  /**\r\n   * Callback function for successful login/registration.\r\n   * Updates the current user state and persists it to local storage.\r\n   * @param {Object} userData - The user object returned from the backend after login/registration.\r\n   */\n  const handleLoginSuccess = userData => {\n    setCurrentUser(userData);\n    localStorage.setItem('currentUser', JSON.stringify(userData)); // Persist user data\n  };\n\n  /**\r\n   * Callback function for successful team selection.\r\n   * Updates the current user state with the new team information and persists it.\r\n   * @param {Object} updatedUser - The user object with updated team information.\r\n   */\n  const handleTeamSelectionSuccess = updatedUser => {\n    setCurrentUser(updatedUser);\n    localStorage.setItem('currentUser', JSON.stringify(updatedUser)); // Update persisted user data\n  };\n\n  // Conditional rendering based on the current user's state\n  if (!currentUser) {\n    // If no user is logged in, show the Login Page\n    return /*#__PURE__*/_jsxDEV(LoginPage, {\n      onLogin: handleLoginSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  } else if (!currentUser.team || !currentUser.team.name) {\n    // If user is logged in but hasn't selected a team, show the Team Selection Page\n    return /*#__PURE__*/_jsxDEV(TeamSelectionPage, {\n      currentUser: currentUser,\n      onTeamSelected: handleTeamSelectionSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  } else {\n    // If user is logged in and has selected a team, proceed to the next screen (e.g., PreviewPage)\n    // This is a placeholder for your next screen.\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome, \", currentUser.username, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your team: \", currentUser.team.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Proceeding to the game information screen...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(App, \"Y5F2pQQk2LZA5WRO2+bvRm5iRuo=\");\n_c = App;\nexport default App; // Ensure App is exported as the default export\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LoginPage","TeamSelectionPage","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","storedUser","JSON","parse","localStorage","getItem","id","username","error","console","removeItem","handleLoginSuccess","userData","setItem","stringify","handleTeamSelectionSuccess","updatedUser","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","team","name","onTeamSelected","className","children","_c","$RefreshReg$"],"sources":["C:/Users/HELLO/Desktop/provernaire-game/frontend/src/App.jsx"],"sourcesContent":["// frontend/src/App.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport LoginPage from './pages/LoginPage';\r\nimport TeamSelectionPage from './pages/TeamSelectionPage';\r\n// You will uncomment and add these components as we build them:\r\n// import PreviewPage from './pages/PreviewPage';\r\n// import GamePage from './pages/GamePage';\r\n// import ResultPage from './pages/ResultPage';\r\n// import LeaderboardPage from './pages/LeaderboardPage';\r\nimport './App.css'; // Global CSS for the overall app layout/body\r\n\r\n/**\r\n * App Component\r\n * This is the main application component that handles routing/flow\r\n * between different screens based on user authentication and game state.\r\n */\r\nconst App = () => {\r\n  // State to hold the current user's data (username, pfpUrl, team, etc.)\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n\r\n  // Effect to load user data from local storage on initial app load\r\n  useEffect(() => {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser && storedUser.id && storedUser.username) { // Basic validation\r\n        setCurrentUser(storedUser);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to parse user data from localStorage:\", error);\r\n      localStorage.removeItem('currentUser'); // Clear invalid data\r\n    }\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  /**\r\n   * Callback function for successful login/registration.\r\n   * Updates the current user state and persists it to local storage.\r\n   * @param {Object} userData - The user object returned from the backend after login/registration.\r\n   */\r\n  const handleLoginSuccess = (userData) => {\r\n    setCurrentUser(userData);\r\n    localStorage.setItem('currentUser', JSON.stringify(userData)); // Persist user data\r\n  };\r\n\r\n  /**\r\n   * Callback function for successful team selection.\r\n   * Updates the current user state with the new team information and persists it.\r\n   * @param {Object} updatedUser - The user object with updated team information.\r\n   */\r\n  const handleTeamSelectionSuccess = (updatedUser) => {\r\n    setCurrentUser(updatedUser);\r\n    localStorage.setItem('currentUser', JSON.stringify(updatedUser)); // Update persisted user data\r\n  };\r\n\r\n  // Conditional rendering based on the current user's state\r\n  if (!currentUser) {\r\n    // If no user is logged in, show the Login Page\r\n    return <LoginPage onLogin={handleLoginSuccess} />;\r\n  } else if (!currentUser.team || !currentUser.team.name) {\r\n    // If user is logged in but hasn't selected a team, show the Team Selection Page\r\n    return <TeamSelectionPage currentUser={currentUser} onTeamSelected={handleTeamSelectionSuccess} />;\r\n  } else {\r\n    // If user is logged in and has selected a team, proceed to the next screen (e.g., PreviewPage)\r\n    // This is a placeholder for your next screen.\r\n    return (\r\n      <div className=\"app-main-content\">\r\n        <h1>Welcome, {currentUser.username}!</h1>\r\n        <p>Your team: {currentUser.team.name}</p>\r\n        <p>Proceeding to the game information screen...</p>\r\n        {/* You will replace this with: <PreviewPage currentUser={currentUser} onStartGame={...} /> */}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App; // Ensure App is exported as the default export\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}