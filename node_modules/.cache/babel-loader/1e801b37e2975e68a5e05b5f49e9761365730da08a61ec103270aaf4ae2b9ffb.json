{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HELLO\\\\Desktop\\\\provernaire-game\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/App.jsx\nimport React, { useState, useEffect } from 'react';\nimport LoginPage from './pages/LoginPage';\nimport TeamSelectionPage from './pages/TeamSelectionPage';\nimport PreviewPage from './pages/PreviewPage'; // IMPORTANT: Ensure this import is present and correct\n// You will uncomment and add these components as we build them:\n// import GamePage from './pages/GamePage';\n// import ResultPage from './pages/ResultPage';\n// import LeaderboardPage from './pages/LeaderboardPage';\nimport './App.css'; // Global CSS for the overall app layout/body\n\n/**\r\n * App Component\r\n * This is the main application component that handles routing/flow\r\n * between different screens based on user authentication and game state.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to hold the current user's data (username, pfpUrl, team, etc.)\n  const [currentUser, setCurrentUser] = useState(null);\n  // State to manage the currently active screen/page\n  const [currentScreen, setCurrentScreen] = useState('login'); // Initial screen\n\n  // Effect to load user data from local storage on initial app load\n  useEffect(() => {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser && storedUser.id && storedUser.username) {\n        // Basic validation\n        setCurrentUser(storedUser);\n        // Determine initial screen based on stored user data\n        if (storedUser.team && storedUser.team.name) {\n          setCurrentScreen('preview'); // If user has team, go to preview\n        } else {\n          setCurrentScreen('teamSelection'); // If user logged in but no team, go to team selection\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to parse user data from localStorage:\", error);\n      localStorage.removeItem('currentUser'); // Clear invalid data\n      setCurrentScreen('login'); // Fallback to login\n    }\n  }, []); // Empty dependency array means this runs once on mount\n\n  /**\r\n   * Callback function for successful login/registration.\r\n   * Updates the current user state and persists it to local storage.\r\n   * Transitions to the team selection screen.\r\n   * @param {Object} userData - The user object returned from the backend after login/registration.\r\n   */\n  const handleLoginSuccess = userData => {\n    setCurrentUser(userData);\n    localStorage.setItem('currentUser', JSON.stringify(userData)); // Persist user data\n    // After login, check if user already has a team.\n    if (userData.team && userData.team.name) {\n      setCurrentScreen('preview'); // If user has team, go to preview\n    } else {\n      setCurrentScreen('teamSelection'); // If new user or no team, go to team selection\n    }\n  };\n\n  /**\r\n   * Callback function for successful team selection.\r\n   * Updates the current user state with the new team information and persists it.\r\n   * Transitions to the preview screen.\r\n   * @param {Object} updatedUser - The user object with updated team information.\r\n   */\n  const handleTeamSelectionSuccess = updatedUser => {\n    setCurrentUser(updatedUser);\n    localStorage.setItem('currentUser', JSON.stringify(updatedUser)); // Update persisted user data\n    setCurrentScreen('preview'); // After team selection, go to preview\n  };\n\n  /**\r\n   * Callback function to start the game from the preview screen.\r\n   * Transitions to the game screen.\r\n   */\n  const handleStartGame = () => {\n    setCurrentScreen('game'); // Transition to the game screen\n  };\n\n  // Conditional rendering based on the currentScreen state\n  switch (currentScreen) {\n    case 'login':\n      return /*#__PURE__*/_jsxDEV(LoginPage, {\n        onLogin: handleLoginSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 14\n      }, this);\n    case 'teamSelection':\n      return /*#__PURE__*/_jsxDEV(TeamSelectionPage, {\n        currentUser: currentUser,\n        onTeamSelected: handleTeamSelectionSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 14\n      }, this);\n    case 'preview':\n      // IMPORTANT: Ensure currentUser exists before passing it to PreviewPage\n      if (currentUser) {\n        return /*#__PURE__*/_jsxDEV(PreviewPage, {\n          currentUser: currentUser,\n          onStartGame: handleStartGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 16\n        }, this);\n      }\n      // Fallback if currentUser is somehow null when screen is 'preview'\n      return /*#__PURE__*/_jsxDEV(LoginPage, {\n        onLogin: handleLoginSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 14\n      }, this);\n    case 'game':\n      // return <GamePage currentUser={currentUser} onGameEnd={handleGameEnd} />; // Next step\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Game Screen Placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Game will start here for \", currentUser === null || currentUser === void 0 ? void 0 : currentUser.username, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCurrentScreen('result'),\n          children: \"End Game (for testing)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this);\n    case 'result':\n      // return <ResultPage currentUser={currentUser} gameResult={latestGameResult} onShare={handleShareResult} onPlayAgain={handlePlayAgain} />;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Result Screen Placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Game ended for \", currentUser === null || currentUser === void 0 ? void 0 : currentUser.username, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCurrentScreen('leaderboard'),\n          children: \"Go to Leaderboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this);\n    case 'leaderboard':\n      // return <LeaderboardPage currentUser={currentUser} />;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Leaderboard Screen Placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Leaderboard for \", currentUser === null || currentUser === void 0 ? void 0 : currentUser.username, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setCurrentScreen('login'),\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this);\n    default:\n      // This default case should ideally not be hit if logic is sound, but acts as a fallback\n      return /*#__PURE__*/_jsxDEV(LoginPage, {\n        onLogin: handleLoginSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 14\n      }, this);\n  }\n};\n_s(App, \"4GmHbi1a4Si/WL1+WrpxsGIpT4s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LoginPage","TeamSelectionPage","PreviewPage","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","currentScreen","setCurrentScreen","storedUser","JSON","parse","localStorage","getItem","id","username","team","name","error","console","removeItem","handleLoginSuccess","userData","setItem","stringify","handleTeamSelectionSuccess","updatedUser","handleStartGame","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","onTeamSelected","onStartGame","className","children","onClick","_c","$RefreshReg$"],"sources":["C:/Users/HELLO/Desktop/provernaire-game/frontend/src/App.jsx"],"sourcesContent":["// frontend/src/App.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport LoginPage from './pages/LoginPage';\r\nimport TeamSelectionPage from './pages/TeamSelectionPage';\r\nimport PreviewPage from './pages/PreviewPage'; // IMPORTANT: Ensure this import is present and correct\r\n// You will uncomment and add these components as we build them:\r\n// import GamePage from './pages/GamePage';\r\n// import ResultPage from './pages/ResultPage';\r\n// import LeaderboardPage from './pages/LeaderboardPage';\r\nimport './App.css'; // Global CSS for the overall app layout/body\r\n\r\n/**\r\n * App Component\r\n * This is the main application component that handles routing/flow\r\n * between different screens based on user authentication and game state.\r\n */\r\nconst App = () => {\r\n  // State to hold the current user's data (username, pfpUrl, team, etc.)\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  // State to manage the currently active screen/page\r\n  const [currentScreen, setCurrentScreen] = useState('login'); // Initial screen\r\n\r\n  // Effect to load user data from local storage on initial app load\r\n  useEffect(() => {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser && storedUser.id && storedUser.username) { // Basic validation\r\n        setCurrentUser(storedUser);\r\n        // Determine initial screen based on stored user data\r\n        if (storedUser.team && storedUser.team.name) {\r\n          setCurrentScreen('preview'); // If user has team, go to preview\r\n        } else {\r\n          setCurrentScreen('teamSelection'); // If user logged in but no team, go to team selection\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to parse user data from localStorage:\", error);\r\n      localStorage.removeItem('currentUser'); // Clear invalid data\r\n      setCurrentScreen('login'); // Fallback to login\r\n    }\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  /**\r\n   * Callback function for successful login/registration.\r\n   * Updates the current user state and persists it to local storage.\r\n   * Transitions to the team selection screen.\r\n   * @param {Object} userData - The user object returned from the backend after login/registration.\r\n   */\r\n  const handleLoginSuccess = (userData) => {\r\n    setCurrentUser(userData);\r\n    localStorage.setItem('currentUser', JSON.stringify(userData)); // Persist user data\r\n    // After login, check if user already has a team.\r\n    if (userData.team && userData.team.name) {\r\n      setCurrentScreen('preview'); // If user has team, go to preview\r\n    } else {\r\n      setCurrentScreen('teamSelection'); // If new user or no team, go to team selection\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Callback function for successful team selection.\r\n   * Updates the current user state with the new team information and persists it.\r\n   * Transitions to the preview screen.\r\n   * @param {Object} updatedUser - The user object with updated team information.\r\n   */\r\n  const handleTeamSelectionSuccess = (updatedUser) => {\r\n    setCurrentUser(updatedUser);\r\n    localStorage.setItem('currentUser', JSON.stringify(updatedUser)); // Update persisted user data\r\n    setCurrentScreen('preview'); // After team selection, go to preview\r\n  };\r\n\r\n  /**\r\n   * Callback function to start the game from the preview screen.\r\n   * Transitions to the game screen.\r\n   */\r\n  const handleStartGame = () => {\r\n    setCurrentScreen('game'); // Transition to the game screen\r\n  };\r\n\r\n  // Conditional rendering based on the currentScreen state\r\n  switch (currentScreen) {\r\n    case 'login':\r\n      return <LoginPage onLogin={handleLoginSuccess} />;\r\n    case 'teamSelection':\r\n      return <TeamSelectionPage currentUser={currentUser} onTeamSelected={handleTeamSelectionSuccess} />;\r\n    case 'preview':\r\n      // IMPORTANT: Ensure currentUser exists before passing it to PreviewPage\r\n      if (currentUser) {\r\n        return <PreviewPage currentUser={currentUser} onStartGame={handleStartGame} />;\r\n      }\r\n      // Fallback if currentUser is somehow null when screen is 'preview'\r\n      return <LoginPage onLogin={handleLoginSuccess} />;\r\n    case 'game':\r\n      // return <GamePage currentUser={currentUser} onGameEnd={handleGameEnd} />; // Next step\r\n      return (\r\n        <div className=\"app-main-content\">\r\n          <h1>Game Screen Placeholder</h1>\r\n          <p>Game will start here for {currentUser?.username}.</p>\r\n          <button onClick={() => setCurrentScreen('result')}>End Game (for testing)</button>\r\n        </div>\r\n      );\r\n    case 'result':\r\n      // return <ResultPage currentUser={currentUser} gameResult={latestGameResult} onShare={handleShareResult} onPlayAgain={handlePlayAgain} />;\r\n      return (\r\n        <div className=\"app-main-content\">\r\n          <h1>Result Screen Placeholder</h1>\r\n          <p>Game ended for {currentUser?.username}.</p>\r\n          <button onClick={() => setCurrentScreen('leaderboard')}>Go to Leaderboard</button>\r\n        </div>\r\n      );\r\n    case 'leaderboard':\r\n      // return <LeaderboardPage currentUser={currentUser} />;\r\n      return (\r\n        <div className=\"app-main-content\">\r\n          <h1>Leaderboard Screen Placeholder</h1>\r\n          <p>Leaderboard for {currentUser?.username}.</p>\r\n          <button onClick={() => setCurrentScreen('login')}>Start Over</button>\r\n        </div>\r\n      );\r\n    default:\r\n      // This default case should ideally not be hit if logic is sound, but acts as a fallback\r\n      return <LoginPage onLogin={handleLoginSuccess} />;\r\n  }\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}