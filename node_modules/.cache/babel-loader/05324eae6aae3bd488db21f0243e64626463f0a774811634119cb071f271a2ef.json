{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HELLO\\\\Desktop\\\\provernaire-game\\\\frontend\\\\src\\\\pages\\\\GamePage.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/pages/GamePage.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { questions } from '../data/questions'; // Import mock questions data\nimport Lifeline from '../components/Lifeline/Lifeline'; // Import the Lifeline component\nimport './GamePage.css'; // Import the CSS for this page\nimport Modal from '../components/Modal/Modal'; // Assuming you might need a modal for game messages\n\n/**\r\n * GamePage Component\r\n * Manages the main game logic, question display, answer submission, lifelines, and score tracking.\r\n * @param {Object} currentUser - The current logged-in user object { id, username, pfpUrl, team: { name, color } }.\r\n * @param {function} onGameEnd - Callback function to transition to the result screen, passing final score.\r\n * @param {function} onScoreUpdate - Callback function to update score on the backend (e.g., after each question).\r\n * @param {function} onNavigateToLeaderboard - Callback function to navigate to the leaderboard screen.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = ({\n  currentUser,\n  onGameEnd,\n  onScoreUpdate,\n  onNavigateToLeaderboard\n}) => {\n  _s();\n  var _currentUser$team, _currentUser$team2, _currentUser$team3, _prizeStructure;\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Renamed for clarity\n  const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null); // Renamed for clarity\n  const [gameQuestions, setGameQuestions] = useState([]);\n  const [lifelines, setLifelines] = useState({\n    fiftyFifty: true,\n    phoneAddy: true,\n    phoneYinger: true,\n    askAudience: true\n  });\n  const [removedAnswers, setRemovedAnswers] = useState([]); // Indices of answers removed by 50/50\n  const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false); // True when an answer is selected and being processed\n  const [timeRemaining, setTimeRemaining] = useState(60);\n  const [timerActive, setTimerActive] = useState(false);\n  const [hasUpdatedScoreForCurrentQuestion, setHasUpdatedScoreForCurrentQuestion] = useState(false); // Flag to prevent multiple score updates per question\n  const [showModal, setShowModal] = useState(false); // State for showing/hiding the modal\n  const [modalMessage, setModalMessage] = useState(''); // Message to display in the modal\n\n  // Updated prize structure: Question 1 = 1,000, Question 10 = 1,000,000\n  const prizeStructure = [1000, 2500, 5000, 10000, 25000, 50000, 100000, 250000, 500000, 1000000];\n\n  // Memoized callback for game end to prevent unnecessary re-renders\n  const handleGameEndCallback = useCallback((score, reason = 'completed') => {\n    console.log('🎮 Game ending with score:', score, 'Reason:', reason);\n    // Pass the final score and reason to the parent (App.jsx)\n    if (onGameEnd) {\n      onGameEnd(score, reason);\n    }\n  }, [onGameEnd]);\n\n  // Memoized callback for score update (to backend)\n  const handleScoreUpdateCallback = useCallback(scoreData => {\n    console.log('📊 Attempting to update score:', scoreData);\n    if (onScoreUpdate) {\n      onScoreUpdate(scoreData);\n    }\n  }, [onScoreUpdate]);\n\n  // Timer effect\n  useEffect(() => {\n    let interval;\n    if (timerActive && timeRemaining > 0 && !isAnswerSubmitted) {\n      interval = setInterval(() => {\n        setTimeRemaining(prevTime => {\n          if (prevTime <= 1) {\n            // Time's up!\n            clearInterval(interval);\n            setTimerActive(false);\n            setIsAnswerSubmitted(true); // Prevent further interaction\n\n            // Determine score for time-out: prize from previous question, or 0 if on first question\n            const gameOverScore = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\n\n            // Use setTimeout to allow state updates to settle before ending game\n            setTimeout(() => {\n              if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n                // Use currentUser.id for backend updates\n                handleScoreUpdateCallback({\n                  userId: currentUser.id,\n                  username: currentUser.username,\n                  pfpUrl: currentUser.pfpUrl,\n                  team: currentUser.team,\n                  score: gameOverScore,\n                  questionNumber: currentQuestionIndex + 1,\n                  timeUp: true\n                });\n              }\n              handleGameEndCallback(gameOverScore, 'time_up');\n            }, 500); // Small delay before ending game\n\n            return 0; // Set time to 0\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n    }\n\n    // Cleanup function for the interval\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [timerActive, isAnswerSubmitted, timeRemaining, currentQuestionIndex, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\n\n  // Timer restart when moving to new question or game starts\n  useEffect(() => {\n    if (gameQuestions.length > 0 && gameQuestions[currentQuestionIndex] && !isAnswerSubmitted) {\n      setTimeRemaining(60); // Reset timer for each new question\n      setTimerActive(true);\n      setHasUpdatedScoreForCurrentQuestion(false); // Reset score update flag for new question\n    } else if (isAnswerSubmitted) {\n      setTimerActive(false); // Ensure timer stops if answer is submitted\n    }\n  }, [currentQuestionIndex, gameQuestions.length, isAnswerSubmitted]);\n\n  // Initialize game questions on component mount\n  useEffect(() => {\n    console.log('🎯 Initializing game questions...');\n    // Select 10 random questions from the pool of 30\n    const shuffled = [...questions].sort(() => Math.random() - 0.5);\n    const selected = shuffled.slice(0, 10);\n    setGameQuestions(selected);\n    setCurrentQuestionIndex(0); // Start from the first question\n    setSelectedAnswerIndex(null);\n    setRemovedAnswers([]);\n    setIsAnswerSubmitted(false);\n    setLifelines({\n      fiftyFifty: true,\n      phoneAddy: true,\n      phoneYinger: true,\n      askAudience: true\n    });\n    setHasUpdatedScoreForCurrentQuestion(false); // Reset score update flag\n  }, []); // Empty dependency array means this runs once on mount\n\n  // Update leaderboard/score on backend when moving to a new question (or game start)\n  // This effect runs when currentQuestionIndex changes, ensuring score is updated for the *new* question\n  useEffect(() => {\n    // Only update if questions are loaded, user is available, and score hasn't been updated for this question yet\n    if (gameQuestions.length > 0 && currentUser !== null && currentUser !== void 0 && currentUser.id && !hasUpdatedScoreForCurrentQuestion) {\n      // The score to update is the prize they *currently have* (secured) from the *previous* question.\n      // If they are on question 1 (index 0), their secured score from previous questions is 0.\n      // If they are on question 2 (index 1), their secured score is prizeStructure[0].\n      const scoreToUpdate = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\n      console.log(`📈 Score update for entering question ${currentQuestionIndex + 1}, secured score: ${scoreToUpdate}`);\n      handleScoreUpdateCallback({\n        userId: currentUser.id,\n        username: currentUser.username,\n        pfpUrl: currentUser.pfpUrl,\n        team: currentUser.team,\n        score: scoreToUpdate,\n        questionNumber: currentQuestionIndex + 1,\n        // Indicate which question they are *on*\n        gameStatus: 'in_progress' // Indicate game is ongoing\n      });\n      setHasUpdatedScoreForCurrentQuestion(true); // Mark as updated\n    }\n  }, [currentQuestionIndex, gameQuestions, currentUser, handleScoreUpdateCallback, hasUpdatedScoreForCurrentQuestion, prizeStructure]);\n  const handleAnswerSelect = useCallback(answerIndex => {\n    // Don't allow selection of removed answers or if answer already submitted\n    if (removedAnswers.includes(answerIndex) || isAnswerSubmitted) return;\n    setSelectedAnswerIndex(answerIndex);\n  }, [removedAnswers, isAnswerSubmitted]);\n\n  // Submit Answer function\n  const submitAnswer = useCallback(() => {\n    if (selectedAnswerIndex === null || !gameQuestions[currentQuestionIndex] || isAnswerSubmitted) {\n      setModalMessage('Please select an answer before submitting.');\n      setShowModal(true);\n      return;\n    }\n    console.log(`🎯 Submitting answer ${selectedAnswerIndex} for question ${currentQuestionIndex + 1}`);\n    setIsAnswerSubmitted(true); // Lock selections and timer\n    setTimerActive(false); // Stop the timer immediately\n\n    const currentQuestionData = gameQuestions[currentQuestionIndex];\n    const correct = currentQuestionData.correctAnswer === selectedAnswerIndex;\n\n    // Show result for 2 seconds before proceeding\n    setTimeout(() => {\n      if (correct) {\n        setModalMessage('✅ Correct Answer!');\n        setShowModal(true);\n        if (currentQuestionIndex === 9) {\n          // Game completed successfully (answered all 10 questions)\n          const finalScore = prizeStructure[currentQuestionIndex];\n          console.log('🎉 Game completed! Final score:', finalScore);\n          if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n            handleScoreUpdateCallback({\n              userId: currentUser.id,\n              username: currentUser.username,\n              pfpUrl: currentUser.pfpUrl,\n              team: currentUser.team,\n              score: finalScore,\n              questionNumber: currentQuestionIndex + 1,\n              completed: true,\n              gameStatus: 'finished'\n            });\n          }\n          handleGameEndCallback(finalScore, 'win'); // Pass final score and win reason\n        } else {\n          // Move to next question\n          console.log(`✅ Correct answer! Moving to question ${currentQuestionIndex + 2}`);\n          setCurrentQuestionIndex(prev => prev + 1);\n          setSelectedAnswerIndex(null);\n          setRemovedAnswers([]);\n          setIsAnswerSubmitted(false);\n          setHasUpdatedScoreForCurrentQuestion(false); // Allow score update for next question\n          // Timer will restart automatically due to useEffect\n        }\n      } else {\n        // Wrong answer - end game\n        setModalMessage('❌ Wrong Answer! Game Over.');\n        setShowModal(true);\n\n        // Score is the prize from the *previous* question (or 0 if on first question)\n        const gameOverScore = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\n        console.log('❌ Wrong answer! Game over with score:', gameOverScore);\n        if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n          handleScoreUpdateCallback({\n            userId: currentUser.id,\n            username: currentUser.username,\n            pfpUrl: currentUser.pfpUrl,\n            team: currentUser.team,\n            score: gameOverScore,\n            questionNumber: currentQuestionIndex + 1,\n            failed: true,\n            gameStatus: 'game_over'\n          });\n        }\n        handleGameEndCallback(gameOverScore, 'lose'); // Pass final score and lose reason\n      }\n    }, 2000); // Show feedback for 2 seconds\n  }, [selectedAnswerIndex, gameQuestions, currentQuestionIndex, isAnswerSubmitted, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\n\n  // Callback to handle lifeline usage from the Lifeline component\n  const handleLifelineUse = useCallback(type => {\n    console.log('Using lifeline:', type);\n    setLifelines(prev => ({\n      ...prev,\n      [type]: false\n    }));\n    const currentQuestionData = gameQuestions[currentQuestionIndex];\n    if (!currentQuestionData) return;\n    if (type === 'fiftyFifty') {\n      const incorrectAnswers = currentQuestionData.options.map((_, i) => i).filter(i => i !== currentQuestionData.correctAnswer);\n\n      // Randomly select two incorrect answers to remove\n      const answersToRemove = [];\n      while (answersToRemove.length < 2 && incorrectAnswers.length > 0) {\n        const randomIndex = Math.floor(Math.random() * incorrectAnswers.length);\n        answersToRemove.push(incorrectAnswers.splice(randomIndex, 1)[0]);\n      }\n      setRemovedAnswers(answersToRemove);\n      setModalMessage('50/50 used! Two incorrect answers have been removed.');\n      setShowModal(true);\n    } else if (type === 'phoneAddy' || type === 'phoneYinger') {\n      // For Phone Addy/Yinger, reveal the correct answer\n      setModalMessage(`Your friend says the correct answer is: ${String.fromCharCode(65 + currentQuestionData.correctAnswer)} (${currentQuestionData.options[currentQuestionData.correctAnswer]})`);\n      setShowModal(true);\n    } else if (type === 'askAudience') {\n      // Simulate audience votes\n      const votes = {};\n      const correctAnswerIndex = currentQuestionData.correctAnswer;\n      const totalVotes = 100;\n      let remainingVotes = totalVotes;\n\n      // Give correct answer a significant portion\n      const correctVotes = Math.floor(Math.random() * (60 - 40 + 1)) + 40; // 40-60%\n      votes[correctAnswerIndex] = correctVotes;\n      remainingVotes -= correctVotes;\n\n      // Distribute remaining votes among other answers\n      const otherOptions = currentQuestionData.options.map((_, i) => i).filter(i => i !== correctAnswerIndex);\n      const numOtherOptions = otherOptions.length;\n      otherOptions.forEach((optionIndex, idx) => {\n        if (idx === numOtherOptions - 1) {\n          // Last option gets remaining votes\n          votes[optionIndex] = remainingVotes;\n        } else {\n          const voteShare = Math.floor(Math.random() * (remainingVotes / (numOtherOptions - idx) * 1.5));\n          votes[optionIndex] = voteShare;\n          remainingVotes -= voteShare;\n        }\n      });\n\n      // Format for display\n      let audienceMessage = 'Audience votes:\\n';\n      currentQuestionData.options.forEach((option, index) => {\n        audienceMessage += `${String.fromCharCode(65 + index)}: ${votes[index] || 0}%\\n`;\n      });\n      setModalMessage(audienceMessage);\n      setShowModal(true);\n    }\n  }, [gameQuestions, currentQuestionIndex]);\n\n  // Walk Away function\n  const walkAway = useCallback(() => {\n    // Only allow walk away if not on the first question\n    if (currentQuestionIndex === 0) {\n      setModalMessage('You cannot walk away on the first question. You must answer!');\n      setShowModal(true);\n      return;\n    }\n    setTimerActive(false); // Stop the timer\n    setIsAnswerSubmitted(true); // Prevent further interaction\n\n    // Player walks away with the prize from the *previous* question they successfully answered\n    const currentPrizeSecured = prizeStructure[currentQuestionIndex - 1];\n    console.log('🚶 Player walking away with:', currentPrizeSecured);\n    if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n      handleScoreUpdateCallback({\n        userId: currentUser.id,\n        username: currentUser.username,\n        pfpUrl: currentUser.pfpUrl,\n        team: currentUser.team,\n        score: currentPrizeSecured,\n        questionNumber: currentQuestionIndex,\n        // Indicate they walked away *before* answering this question\n        walkedAway: true,\n        gameStatus: 'walked_away'\n      });\n    }\n    handleGameEndCallback(currentPrizeSecured, 'walk_away'); // Pass score and walk away reason\n  }, [currentQuestionIndex, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\n\n  // Handle leaderboard navigation with logging\n  const handleLeaderboardClick = useCallback(() => {\n    console.log('🏆 Navigating to leaderboard...');\n    if (onNavigateToLeaderboard) {\n      onNavigateToLeaderboard();\n    } else {\n      console.error('❌ onNavigateToLeaderboard function not provided');\n      setModalMessage('Leaderboard navigation is not available.');\n      setShowModal(true);\n    }\n  }, [onNavigateToLeaderboard]);\n\n  // Memoized timer functions for dynamic styling\n  const getTimerColor = useCallback(() => {\n    if (timeRemaining > 30) return '#B0FF6F'; // Green\n    if (timeRemaining > 15) return '#FF955E'; // Orange\n    return '#FF54D7'; // Pink/Red\n  }, [timeRemaining]);\n  const getTimerText = useCallback(() => {\n    if (timeRemaining > 30) return '🟢';\n    if (timeRemaining > 15) return '🟡';\n    return '🔴';\n  }, [timeRemaining]);\n\n  // Early return for loading state or if questions aren't loaded yet\n  if (gameQuestions.length === 0 || !gameQuestions[currentQuestionIndex]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-loading-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-text\",\n          children: \"Loading questions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestionData = gameQuestions[currentQuestionIndex];\n  const currentPrizePotential = prizeStructure[currentQuestionIndex]; // Prize for answering *this* question correctly\n  const timerColor = getTimerColor();\n  const timerText = getTimerText();\n\n  // Debug log for current state\n  console.log('🎮 GamePage Render:', {\n    questionNumber: currentQuestionIndex + 1,\n    currentPrizePotential,\n    timeRemaining,\n    timerActive,\n    isAnswerSubmitted,\n    hasUpdatedScore: hasUpdatedScoreForCurrentQuestion,\n    currentUser: currentUser === null || currentUser === void 0 ? void 0 : currentUser.username,\n    currentTeam: currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$team = currentUser.team) === null || _currentUser$team === void 0 ? void 0 : _currentUser$team.name\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-page-container\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background-animation\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"floating-shapes\",\n        children: [...Array(20)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `shape shape-${i % 4}`\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-content-wrapper\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.pfpUrl) || 'https://placehold.co/50x50/cccccc/000000?text=PFP',\n            alt: \"Profile\",\n            className: \"user-pfp\",\n            onError: e => {\n              e.target.onerror = null;\n              e.target.src = 'https://placehold.co/50x50/cccccc/000000?text=PFP';\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"user-username\",\n            children: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.username) || 'User'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-team\",\n            style: {\n              backgroundColor: (currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$team2 = currentUser.team) === null || _currentUser$team2 === void 0 ? void 0 : _currentUser$team2.color) || '#000'\n            },\n            children: (currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$team3 = currentUser.team) === null || _currentUser$team3 === void 0 ? void 0 : _currentUser$team3.name) || 'Team'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current-prize\",\n            children: [(currentPrizePotential === null || currentPrizePotential === void 0 ? void 0 : currentPrizePotential.toLocaleString()) || '0', \" $PROVE\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-number\",\n            children: [\"Question \", currentQuestionIndex + 1, \" of 10\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"leaderboard-button\",\n            onClick: handleLeaderboardClick,\n            type: \"button\",\n            title: \"View Leaderboard\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"leaderboard-icon\",\n              children: \"\\uD83C\\uDFC6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"leaderboard-text\",\n              children: \"Leaderboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lifelines-timer-section\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `timer-display ${timeRemaining <= 10 ? 'timer-critical' : ''}`,\n              style: {\n                color: timerColor,\n                borderColor: timerColor,\n                boxShadow: `0 0 10px ${timerColor}80` // Adjusted shadow for better visibility\n              },\n              children: [timerText, \" \", timeRemaining, \"s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 443,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-game-layout\",\n        children: [/*#__PURE__*/_jsxDEV(Lifeline, {\n          lifelines: lifelines,\n          onLifelineUse: handleLifelineUse,\n          currentQuestion: currentQuestionData // Pass the current question object\n          ,\n          isAnswerSubmitted: isAnswerSubmitted,\n          onRemovedAnswers: setRemovedAnswers // Direct setter for simplicity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"question-text\",\n              children: currentQuestionData.question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"answers-grid\",\n              children: currentQuestionData.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `answer-button ${selectedAnswerIndex === index ? 'selected' : ''} ${removedAnswers.includes(index) ? 'removed' : ''} ${isAnswerSubmitted ? index === currentQuestionData.correctAnswer ? 'correct' : selectedAnswerIndex === index ? 'incorrect' : '' : ''}`,\n                onClick: () => handleAnswerSelect(index),\n                disabled: removedAnswers.includes(index) || isAnswerSubmitted,\n                type: \"button\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"answer-letter\",\n                  children: String.fromCharCode(65 + index)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 484,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"answer-text\",\n                  children: option\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 485,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 477,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"action-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"walk-away-button\",\n                onClick: walkAway,\n                disabled: isAnswerSubmitted || currentQuestionIndex === 0,\n                type: \"button\",\n                children: [\"Walk Away\", currentQuestionIndex > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"walk-away-amount\",\n                  children: [\"(\", (_prizeStructure = prizeStructure[currentQuestionIndex - 1]) === null || _prizeStructure === void 0 ? void 0 : _prizeStructure.toLocaleString(), \" $PROVE)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 499,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"submit-button\",\n                onClick: submitAnswer,\n                disabled: selectedAnswerIndex === null || isAnswerSubmitted,\n                type: \"button\",\n                children: isAnswerSubmitted ? 'Processing...' : 'Final Answer'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prize-ladder\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prize-ladder-header\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"prize-ladder-title\",\n              children: \"\\uD83D\\uDCB0 PRIZE LADDER\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 13\n          }, this), [...prizeStructure].reverse().map((prize, reverseIndex) => {\n            const actualIndex = prizeStructure.length - 1 - reverseIndex;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `prize-item ${actualIndex === currentQuestionIndex ? 'current' : ''} ${actualIndex < currentQuestionIndex ? 'completed' : ''}`,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"prize-number\",\n                children: actualIndex + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 529,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"prize-amount\",\n                children: [prize.toLocaleString(), \" $PROVE\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 19\n              }, this)]\n            }, actualIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onClose: () => setShowModal(false),\n      message: modalMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 389,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"DrM/0zaVlo1NhyLswkdcSsWUI18=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","questions","Lifeline","Modal","jsxDEV","_jsxDEV","GamePage","currentUser","onGameEnd","onScoreUpdate","onNavigateToLeaderboard","_s","_currentUser$team","_currentUser$team2","_currentUser$team3","_prizeStructure","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswerIndex","setSelectedAnswerIndex","gameQuestions","setGameQuestions","lifelines","setLifelines","fiftyFifty","phoneAddy","phoneYinger","askAudience","removedAnswers","setRemovedAnswers","isAnswerSubmitted","setIsAnswerSubmitted","timeRemaining","setTimeRemaining","timerActive","setTimerActive","hasUpdatedScoreForCurrentQuestion","setHasUpdatedScoreForCurrentQuestion","showModal","setShowModal","modalMessage","setModalMessage","prizeStructure","handleGameEndCallback","score","reason","console","log","handleScoreUpdateCallback","scoreData","interval","setInterval","prevTime","clearInterval","gameOverScore","setTimeout","id","userId","username","pfpUrl","team","questionNumber","timeUp","length","shuffled","sort","Math","random","selected","slice","scoreToUpdate","gameStatus","handleAnswerSelect","answerIndex","includes","submitAnswer","currentQuestionData","correct","correctAnswer","finalScore","completed","prev","failed","handleLifelineUse","type","incorrectAnswers","options","map","_","i","filter","answersToRemove","randomIndex","floor","push","splice","String","fromCharCode","votes","correctAnswerIndex","totalVotes","remainingVotes","correctVotes","otherOptions","numOtherOptions","forEach","optionIndex","idx","voteShare","audienceMessage","option","index","walkAway","currentPrizeSecured","walkedAway","handleLeaderboardClick","error","getTimerColor","getTimerText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentPrizePotential","timerColor","timerText","hasUpdatedScore","currentTeam","name","Array","src","alt","onError","e","target","onerror","style","backgroundColor","color","toLocaleString","onClick","title","borderColor","boxShadow","onLifelineUse","currentQuestion","onRemovedAnswers","question","disabled","reverse","prize","reverseIndex","actualIndex","show","onClose","message","_c","$RefreshReg$"],"sources":["C:/Users/HELLO/Desktop/provernaire-game/frontend/src/pages/GamePage.jsx"],"sourcesContent":["// frontend/src/pages/GamePage.jsx\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { questions } from '../data/questions'; // Import mock questions data\r\nimport Lifeline from '../components/Lifeline/Lifeline'; // Import the Lifeline component\r\nimport './GamePage.css'; // Import the CSS for this page\r\nimport Modal from '../components/Modal/Modal'; // Assuming you might need a modal for game messages\r\n\r\n/**\r\n * GamePage Component\r\n * Manages the main game logic, question display, answer submission, lifelines, and score tracking.\r\n * @param {Object} currentUser - The current logged-in user object { id, username, pfpUrl, team: { name, color } }.\r\n * @param {function} onGameEnd - Callback function to transition to the result screen, passing final score.\r\n * @param {function} onScoreUpdate - Callback function to update score on the backend (e.g., after each question).\r\n * @param {function} onNavigateToLeaderboard - Callback function to navigate to the leaderboard screen.\r\n */\r\nconst GamePage = ({ currentUser, onGameEnd, onScoreUpdate, onNavigateToLeaderboard }) => {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Renamed for clarity\r\n  const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null); // Renamed for clarity\r\n  const [gameQuestions, setGameQuestions] = useState([]);\r\n  const [lifelines, setLifelines] = useState({\r\n    fiftyFifty: true,\r\n    phoneAddy: true,\r\n    phoneYinger: true,\r\n    askAudience: true\r\n  });\r\n  const [removedAnswers, setRemovedAnswers] = useState([]); // Indices of answers removed by 50/50\r\n  const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false); // True when an answer is selected and being processed\r\n  const [timeRemaining, setTimeRemaining] = useState(60);\r\n  const [timerActive, setTimerActive] = useState(false);\r\n  const [hasUpdatedScoreForCurrentQuestion, setHasUpdatedScoreForCurrentQuestion] = useState(false); // Flag to prevent multiple score updates per question\r\n  const [showModal, setShowModal] = useState(false); // State for showing/hiding the modal\r\n  const [modalMessage, setModalMessage] = useState(''); // Message to display in the modal\r\n\r\n  // Updated prize structure: Question 1 = 1,000, Question 10 = 1,000,000\r\n  const prizeStructure = [\r\n    1000, 2500, 5000, 10000, 25000, 50000, 100000, 250000, 500000, 1000000\r\n  ];\r\n\r\n  // Memoized callback for game end to prevent unnecessary re-renders\r\n  const handleGameEndCallback = useCallback((score, reason = 'completed') => {\r\n    console.log('🎮 Game ending with score:', score, 'Reason:', reason);\r\n    // Pass the final score and reason to the parent (App.jsx)\r\n    if (onGameEnd) {\r\n      onGameEnd(score, reason);\r\n    }\r\n  }, [onGameEnd]);\r\n\r\n  // Memoized callback for score update (to backend)\r\n  const handleScoreUpdateCallback = useCallback((scoreData) => {\r\n    console.log('📊 Attempting to update score:', scoreData);\r\n    if (onScoreUpdate) {\r\n      onScoreUpdate(scoreData);\r\n    }\r\n  }, [onScoreUpdate]);\r\n\r\n  // Timer effect\r\n  useEffect(() => {\r\n    let interval;\r\n\r\n    if (timerActive && timeRemaining > 0 && !isAnswerSubmitted) {\r\n      interval = setInterval(() => {\r\n        setTimeRemaining(prevTime => {\r\n          if (prevTime <= 1) {\r\n            // Time's up!\r\n            clearInterval(interval);\r\n            setTimerActive(false);\r\n            setIsAnswerSubmitted(true); // Prevent further interaction\r\n\r\n            // Determine score for time-out: prize from previous question, or 0 if on first question\r\n            const gameOverScore = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\r\n\r\n            // Use setTimeout to allow state updates to settle before ending game\r\n            setTimeout(() => {\r\n              if (currentUser?.id) { // Use currentUser.id for backend updates\r\n                handleScoreUpdateCallback({\r\n                  userId: currentUser.id,\r\n                  username: currentUser.username,\r\n                  pfpUrl: currentUser.pfpUrl,\r\n                  team: currentUser.team,\r\n                  score: gameOverScore,\r\n                  questionNumber: currentQuestionIndex + 1,\r\n                  timeUp: true\r\n                });\r\n              }\r\n              handleGameEndCallback(gameOverScore, 'time_up');\r\n            }, 500); // Small delay before ending game\r\n\r\n            return 0; // Set time to 0\r\n          }\r\n          return prevTime - 1;\r\n        });\r\n      }, 1000);\r\n    }\r\n\r\n    // Cleanup function for the interval\r\n    return () => {\r\n      if (interval) {\r\n        clearInterval(interval);\r\n      }\r\n    };\r\n  }, [timerActive, isAnswerSubmitted, timeRemaining, currentQuestionIndex, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\r\n\r\n  // Timer restart when moving to new question or game starts\r\n  useEffect(() => {\r\n    if (gameQuestions.length > 0 && gameQuestions[currentQuestionIndex] && !isAnswerSubmitted) {\r\n      setTimeRemaining(60); // Reset timer for each new question\r\n      setTimerActive(true);\r\n      setHasUpdatedScoreForCurrentQuestion(false); // Reset score update flag for new question\r\n    } else if (isAnswerSubmitted) {\r\n      setTimerActive(false); // Ensure timer stops if answer is submitted\r\n    }\r\n  }, [currentQuestionIndex, gameQuestions.length, isAnswerSubmitted]);\r\n\r\n  // Initialize game questions on component mount\r\n  useEffect(() => {\r\n    console.log('🎯 Initializing game questions...');\r\n    // Select 10 random questions from the pool of 30\r\n    const shuffled = [...questions].sort(() => Math.random() - 0.5);\r\n    const selected = shuffled.slice(0, 10);\r\n    setGameQuestions(selected);\r\n    setCurrentQuestionIndex(0); // Start from the first question\r\n    setSelectedAnswerIndex(null);\r\n    setRemovedAnswers([]);\r\n    setIsAnswerSubmitted(false);\r\n    setLifelines({\r\n      fiftyFifty: true,\r\n      phoneAddy: true,\r\n      phoneYinger: true,\r\n      askAudience: true\r\n    });\r\n    setHasUpdatedScoreForCurrentQuestion(false); // Reset score update flag\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  // Update leaderboard/score on backend when moving to a new question (or game start)\r\n  // This effect runs when currentQuestionIndex changes, ensuring score is updated for the *new* question\r\n  useEffect(() => {\r\n    // Only update if questions are loaded, user is available, and score hasn't been updated for this question yet\r\n    if (gameQuestions.length > 0 && currentUser?.id && !hasUpdatedScoreForCurrentQuestion) {\r\n      // The score to update is the prize they *currently have* (secured) from the *previous* question.\r\n      // If they are on question 1 (index 0), their secured score from previous questions is 0.\r\n      // If they are on question 2 (index 1), their secured score is prizeStructure[0].\r\n      const scoreToUpdate = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\r\n\r\n      console.log(`📈 Score update for entering question ${currentQuestionIndex + 1}, secured score: ${scoreToUpdate}`);\r\n\r\n      handleScoreUpdateCallback({\r\n        userId: currentUser.id,\r\n        username: currentUser.username,\r\n        pfpUrl: currentUser.pfpUrl,\r\n        team: currentUser.team,\r\n        score: scoreToUpdate,\r\n        questionNumber: currentQuestionIndex + 1, // Indicate which question they are *on*\r\n        gameStatus: 'in_progress' // Indicate game is ongoing\r\n      });\r\n\r\n      setHasUpdatedScoreForCurrentQuestion(true); // Mark as updated\r\n    }\r\n  }, [currentQuestionIndex, gameQuestions, currentUser, handleScoreUpdateCallback, hasUpdatedScoreForCurrentQuestion, prizeStructure]);\r\n\r\n\r\n  const handleAnswerSelect = useCallback((answerIndex) => {\r\n    // Don't allow selection of removed answers or if answer already submitted\r\n    if (removedAnswers.includes(answerIndex) || isAnswerSubmitted) return;\r\n    setSelectedAnswerIndex(answerIndex);\r\n  }, [removedAnswers, isAnswerSubmitted]);\r\n\r\n  // Submit Answer function\r\n  const submitAnswer = useCallback(() => {\r\n    if (selectedAnswerIndex === null || !gameQuestions[currentQuestionIndex] || isAnswerSubmitted) {\r\n      setModalMessage('Please select an answer before submitting.');\r\n      setShowModal(true);\r\n      return;\r\n    }\r\n\r\n    console.log(`🎯 Submitting answer ${selectedAnswerIndex} for question ${currentQuestionIndex + 1}`);\r\n    setIsAnswerSubmitted(true); // Lock selections and timer\r\n    setTimerActive(false); // Stop the timer immediately\r\n\r\n    const currentQuestionData = gameQuestions[currentQuestionIndex];\r\n    const correct = currentQuestionData.correctAnswer === selectedAnswerIndex;\r\n\r\n    // Show result for 2 seconds before proceeding\r\n    setTimeout(() => {\r\n      if (correct) {\r\n        setModalMessage('✅ Correct Answer!');\r\n        setShowModal(true);\r\n\r\n        if (currentQuestionIndex === 9) {\r\n          // Game completed successfully (answered all 10 questions)\r\n          const finalScore = prizeStructure[currentQuestionIndex];\r\n          console.log('🎉 Game completed! Final score:', finalScore);\r\n          if (currentUser?.id) {\r\n            handleScoreUpdateCallback({\r\n              userId: currentUser.id,\r\n              username: currentUser.username,\r\n              pfpUrl: currentUser.pfpUrl,\r\n              team: currentUser.team,\r\n              score: finalScore,\r\n              questionNumber: currentQuestionIndex + 1,\r\n              completed: true,\r\n              gameStatus: 'finished'\r\n            });\r\n          }\r\n          handleGameEndCallback(finalScore, 'win'); // Pass final score and win reason\r\n        } else {\r\n          // Move to next question\r\n          console.log(`✅ Correct answer! Moving to question ${currentQuestionIndex + 2}`);\r\n          setCurrentQuestionIndex(prev => prev + 1);\r\n          setSelectedAnswerIndex(null);\r\n          setRemovedAnswers([]);\r\n          setIsAnswerSubmitted(false);\r\n          setHasUpdatedScoreForCurrentQuestion(false); // Allow score update for next question\r\n          // Timer will restart automatically due to useEffect\r\n        }\r\n      } else {\r\n        // Wrong answer - end game\r\n        setModalMessage('❌ Wrong Answer! Game Over.');\r\n        setShowModal(true);\r\n\r\n        // Score is the prize from the *previous* question (or 0 if on first question)\r\n        const gameOverScore = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\r\n        console.log('❌ Wrong answer! Game over with score:', gameOverScore);\r\n        if (currentUser?.id) {\r\n          handleScoreUpdateCallback({\r\n            userId: currentUser.id,\r\n            username: currentUser.username,\r\n            pfpUrl: currentUser.pfpUrl,\r\n            team: currentUser.team,\r\n            score: gameOverScore,\r\n            questionNumber: currentQuestionIndex + 1,\r\n            failed: true,\r\n            gameStatus: 'game_over'\r\n          });\r\n        }\r\n        handleGameEndCallback(gameOverScore, 'lose'); // Pass final score and lose reason\r\n      }\r\n    }, 2000); // Show feedback for 2 seconds\r\n  }, [selectedAnswerIndex, gameQuestions, currentQuestionIndex, isAnswerSubmitted, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\r\n\r\n  // Callback to handle lifeline usage from the Lifeline component\r\n  const handleLifelineUse = useCallback((type) => {\r\n    console.log('Using lifeline:', type);\r\n    setLifelines(prev => ({ ...prev, [type]: false }));\r\n\r\n    const currentQuestionData = gameQuestions[currentQuestionIndex];\r\n    if (!currentQuestionData) return;\r\n\r\n    if (type === 'fiftyFifty') {\r\n      const incorrectAnswers = currentQuestionData.options\r\n        .map((_, i) => i)\r\n        .filter(i => i !== currentQuestionData.correctAnswer);\r\n\r\n      // Randomly select two incorrect answers to remove\r\n      const answersToRemove = [];\r\n      while (answersToRemove.length < 2 && incorrectAnswers.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * incorrectAnswers.length);\r\n        answersToRemove.push(incorrectAnswers.splice(randomIndex, 1)[0]);\r\n      }\r\n      setRemovedAnswers(answersToRemove);\r\n      setModalMessage('50/50 used! Two incorrect answers have been removed.');\r\n      setShowModal(true);\r\n    } else if (type === 'phoneAddy' || type === 'phoneYinger') {\r\n      // For Phone Addy/Yinger, reveal the correct answer\r\n      setModalMessage(`Your friend says the correct answer is: ${String.fromCharCode(65 + currentQuestionData.correctAnswer)} (${currentQuestionData.options[currentQuestionData.correctAnswer]})`);\r\n      setShowModal(true);\r\n    } else if (type === 'askAudience') {\r\n      // Simulate audience votes\r\n      const votes = {};\r\n      const correctAnswerIndex = currentQuestionData.correctAnswer;\r\n      const totalVotes = 100;\r\n      let remainingVotes = totalVotes;\r\n\r\n      // Give correct answer a significant portion\r\n      const correctVotes = Math.floor(Math.random() * (60 - 40 + 1)) + 40; // 40-60%\r\n      votes[correctAnswerIndex] = correctVotes;\r\n      remainingVotes -= correctVotes;\r\n\r\n      // Distribute remaining votes among other answers\r\n      const otherOptions = currentQuestionData.options.map((_, i) => i).filter(i => i !== correctAnswerIndex);\r\n      const numOtherOptions = otherOptions.length;\r\n\r\n      otherOptions.forEach((optionIndex, idx) => {\r\n        if (idx === numOtherOptions - 1) { // Last option gets remaining votes\r\n          votes[optionIndex] = remainingVotes;\r\n        } else {\r\n          const voteShare = Math.floor(Math.random() * (remainingVotes / (numOtherOptions - idx) * 1.5));\r\n          votes[optionIndex] = voteShare;\r\n          remainingVotes -= voteShare;\r\n        }\r\n      });\r\n\r\n      // Format for display\r\n      let audienceMessage = 'Audience votes:\\n';\r\n      currentQuestionData.options.forEach((option, index) => {\r\n        audienceMessage += `${String.fromCharCode(65 + index)}: ${votes[index] || 0}%\\n`;\r\n      });\r\n      setModalMessage(audienceMessage);\r\n      setShowModal(true);\r\n    }\r\n  }, [gameQuestions, currentQuestionIndex]);\r\n\r\n\r\n  // Walk Away function\r\n  const walkAway = useCallback(() => {\r\n    // Only allow walk away if not on the first question\r\n    if (currentQuestionIndex === 0) {\r\n      setModalMessage('You cannot walk away on the first question. You must answer!');\r\n      setShowModal(true);\r\n      return;\r\n    }\r\n\r\n    setTimerActive(false); // Stop the timer\r\n    setIsAnswerSubmitted(true); // Prevent further interaction\r\n\r\n    // Player walks away with the prize from the *previous* question they successfully answered\r\n    const currentPrizeSecured = prizeStructure[currentQuestionIndex - 1];\r\n    console.log('🚶 Player walking away with:', currentPrizeSecured);\r\n\r\n    if (currentUser?.id) {\r\n      handleScoreUpdateCallback({\r\n        userId: currentUser.id,\r\n        username: currentUser.username,\r\n        pfpUrl: currentUser.pfpUrl,\r\n        team: currentUser.team,\r\n        score: currentPrizeSecured,\r\n        questionNumber: currentQuestionIndex, // Indicate they walked away *before* answering this question\r\n        walkedAway: true,\r\n        gameStatus: 'walked_away'\r\n      });\r\n    }\r\n    handleGameEndCallback(currentPrizeSecured, 'walk_away'); // Pass score and walk away reason\r\n  }, [currentQuestionIndex, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\r\n\r\n  // Handle leaderboard navigation with logging\r\n  const handleLeaderboardClick = useCallback(() => {\r\n    console.log('🏆 Navigating to leaderboard...');\r\n    if (onNavigateToLeaderboard) {\r\n      onNavigateToLeaderboard();\r\n    } else {\r\n      console.error('❌ onNavigateToLeaderboard function not provided');\r\n      setModalMessage('Leaderboard navigation is not available.');\r\n      setShowModal(true);\r\n    }\r\n  }, [onNavigateToLeaderboard]);\r\n\r\n  // Memoized timer functions for dynamic styling\r\n  const getTimerColor = useCallback(() => {\r\n    if (timeRemaining > 30) return '#B0FF6F'; // Green\r\n    if (timeRemaining > 15) return '#FF955E'; // Orange\r\n    return '#FF54D7'; // Pink/Red\r\n  }, [timeRemaining]);\r\n\r\n  const getTimerText = useCallback(() => {\r\n    if (timeRemaining > 30) return '🟢';\r\n    if (timeRemaining > 15) return '🟡';\r\n    return '🔴';\r\n  }, [timeRemaining]);\r\n\r\n  // Early return for loading state or if questions aren't loaded yet\r\n  if (gameQuestions.length === 0 || !gameQuestions[currentQuestionIndex]) {\r\n    return (\r\n      <div className=\"game-loading-screen\">\r\n        <div className=\"loading-content\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <div className=\"loading-text\">Loading questions...</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentQuestionData = gameQuestions[currentQuestionIndex];\r\n  const currentPrizePotential = prizeStructure[currentQuestionIndex]; // Prize for answering *this* question correctly\r\n  const timerColor = getTimerColor();\r\n  const timerText = getTimerText();\r\n\r\n  // Debug log for current state\r\n  console.log('🎮 GamePage Render:', {\r\n    questionNumber: currentQuestionIndex + 1,\r\n    currentPrizePotential,\r\n    timeRemaining,\r\n    timerActive,\r\n    isAnswerSubmitted,\r\n    hasUpdatedScore: hasUpdatedScoreForCurrentQuestion,\r\n    currentUser: currentUser?.username,\r\n    currentTeam: currentUser?.team?.name,\r\n  });\r\n\r\n  return (\r\n    <div className=\"game-page-container\"> {/* Main container */}\r\n      {/* Background Animation */}\r\n      <div className=\"background-animation\">\r\n        <div className=\"floating-shapes\">\r\n          {[...Array(20)].map((_, i) => (\r\n            <div key={i} className={`shape shape-${i % 4}`}></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"game-content-wrapper\"> {/* Wrapper for main game content (header, main-game-area) */}\r\n        {/* Header */}\r\n        <div className=\"game-header\">\r\n          <div className=\"user-info\">\r\n            <img\r\n              src={currentUser?.pfpUrl || 'https://placehold.co/50x50/cccccc/000000?text=PFP'}\r\n              alt=\"Profile\"\r\n              className=\"user-pfp\"\r\n              onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/50x50/cccccc/000000?text=PFP'; }}\r\n            />\r\n            <span className=\"user-username\">{currentUser?.username || 'User'}</span>\r\n            <div\r\n              className=\"user-team\"\r\n              style={{ backgroundColor: currentUser?.team?.color || '#000' }}\r\n            >\r\n              {currentUser?.team?.name || 'Team'}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"score-info\">\r\n            <div className=\"current-prize\">\r\n              {currentPrizePotential?.toLocaleString() || '0'} $PROVE\r\n            </div>\r\n            <div className=\"question-number\">\r\n              Question {currentQuestionIndex + 1} of 10\r\n            </div>\r\n          </div>\r\n\r\n          {/* Header Actions */}\r\n          <div className=\"header-actions\">\r\n            {/* Leaderboard Button */}\r\n            <button\r\n              className=\"leaderboard-button\"\r\n              onClick={handleLeaderboardClick}\r\n              type=\"button\"\r\n              title=\"View Leaderboard\"\r\n            >\r\n              <span className=\"leaderboard-icon\">🏆</span>\r\n              <span className=\"leaderboard-text\">Leaderboard</span>\r\n            </button>\r\n\r\n            {/* Compact Lifelines and Timer Section */}\r\n            <div className=\"lifelines-timer-section\">\r\n              {/* Timer Display */}\r\n              <div\r\n                className={`timer-display ${timeRemaining <= 10 ? 'timer-critical' : ''}`}\r\n                style={{\r\n                  color: timerColor,\r\n                  borderColor: timerColor,\r\n                  boxShadow: `0 0 10px ${timerColor}80` // Adjusted shadow for better visibility\r\n                }}\r\n              >\r\n                {timerText} {timeRemaining}s\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Main Game Layout: Lifelines (Left) | Question (Center) | Prize Ladder (Right) */}\r\n        <div className=\"main-game-layout\">\r\n          {/* Lifelines on the left */}\r\n          <Lifeline\r\n            lifelines={lifelines}\r\n            onLifelineUse={handleLifelineUse}\r\n            currentQuestion={currentQuestionData} // Pass the current question object\r\n            isAnswerSubmitted={isAnswerSubmitted}\r\n            onRemovedAnswers={setRemovedAnswers} // Direct setter for simplicity\r\n          />\r\n\r\n          {/* Question in the center */}\r\n          <div className=\"question-container\">\r\n            <div className=\"question-card\">\r\n              <h2 className=\"question-text\">\r\n                {currentQuestionData.question}\r\n              </h2>\r\n\r\n              <div className=\"answers-grid\">\r\n                {currentQuestionData.options.map((option, index) => (\r\n                  <button\r\n                    key={index}\r\n                    className={`answer-button ${selectedAnswerIndex === index ? 'selected' : ''} ${removedAnswers.includes(index) ? 'removed' : ''} ${isAnswerSubmitted ? (index === currentQuestionData.correctAnswer ? 'correct' : (selectedAnswerIndex === index ? 'incorrect' : '')) : ''}`}\r\n                    onClick={() => handleAnswerSelect(index)}\r\n                    disabled={removedAnswers.includes(index) || isAnswerSubmitted}\r\n                    type=\"button\"\r\n                  >\r\n                    <span className=\"answer-letter\">{String.fromCharCode(65 + index)}</span>\r\n                    <span className=\"answer-text\">{option}</span>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"action-buttons\">\r\n                <button\r\n                  className=\"walk-away-button\"\r\n                  onClick={walkAway}\r\n                  disabled={isAnswerSubmitted || currentQuestionIndex === 0}\r\n                  type=\"button\"\r\n                >\r\n                  Walk Away\r\n                  {currentQuestionIndex > 0 && (\r\n                    <span className=\"walk-away-amount\">\r\n                      ({prizeStructure[currentQuestionIndex - 1]?.toLocaleString()} $PROVE)\r\n                    </span>\r\n                  )}\r\n                </button>\r\n\r\n                <button\r\n                  className=\"submit-button\"\r\n                  onClick={submitAnswer}\r\n                  disabled={selectedAnswerIndex === null || isAnswerSubmitted}\r\n                  type=\"button\"\r\n                >\r\n                  {isAnswerSubmitted ? 'Processing...' : 'Final Answer'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Prize Ladder on the right */}\r\n          <div className=\"prize-ladder\">\r\n            <div className=\"prize-ladder-header\">\r\n              <h4 className=\"prize-ladder-title\">💰 PRIZE LADDER</h4>\r\n            </div>\r\n            {[...prizeStructure].reverse().map((prize, reverseIndex) => {\r\n              const actualIndex = prizeStructure.length - 1 - reverseIndex;\r\n              return (\r\n                <div\r\n                  key={actualIndex}\r\n                  className={`prize-item ${actualIndex === currentQuestionIndex ? 'current' : ''} ${actualIndex < currentQuestionIndex ? 'completed' : ''}`}\r\n                >\r\n                  <span className=\"prize-number\">{actualIndex + 1}</span>\r\n                  <span className=\"prize-amount\">{prize.toLocaleString()} $PROVE</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* Modal for game messages */}\r\n      <Modal show={showModal} onClose={() => setShowModal(false)} message={modalMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}