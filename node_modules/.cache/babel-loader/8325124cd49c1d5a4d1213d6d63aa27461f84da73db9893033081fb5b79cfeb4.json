{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HELLO\\\\Desktop\\\\provernaire-game\\\\frontend\\\\src\\\\pages\\\\GamePage.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/pages/GamePage.jsx\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { questions } from '../data/questions'; // RE-ADDED: Using mock data for questions\nimport Lifeline from '../components/Lifeline/Lifeline';\nimport './GamePage.css';\nimport Modal from '../components/Modal/Modal';\nimport { updateGameScore } from '../api/api'; // getGameQuestions removed as it's no longer needed\n\n/**\r\n * GamePage Component\r\n * Manages the main game logic, question display, answer submission, lifelines, and score tracking.\r\n * @param {Object} currentUser - The current logged-in user object { id, username, pfpUrl, team: { name, color } }.\r\n * @param {function} onGameEnd - Callback function to transition to the result screen, passing final score.\r\n * @param {function} onScoreUpdate - Callback function to update score on the backend (e.g., after each question).\r\n * @param {function} onNavigateToLeaderboard - Callback function to navigate to the leaderboard screen.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = ({\n  currentUser,\n  onGameEnd,\n  onScoreUpdate,\n  onNavigateToLeaderboard\n}) => {\n  _s();\n  var _currentUser$team, _currentUser$team2, _currentUser$team3, _prizeStructure;\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null);\n  const [gameQuestions, setGameQuestions] = useState([]); // Will be initialized from local data\n  const [lifelines, setLifelines] = useState({\n    fiftyFifty: true,\n    phoneAddy: true,\n    phoneYinger: true,\n    askAudience: true\n  });\n  const [removedAnswers, setRemovedAnswers] = useState([]);\n  const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false);\n  const [timeRemaining, setTimeRemaining] = useState(60);\n  const [timerActive, setTimerActive] = useState(false);\n  const [hasUpdatedScoreForCurrentQuestion, setHasUpdatedScoreForCurrentQuestion] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState('');\n\n  // Updated prize structure: Question 1 = 1,000, Question 10 = 1,000,000\n  const prizeStructure = [1000, 2500, 5000, 10000, 25000, 50000, 100000, 250000, 500000, 1000000];\n\n  // Memoized callback for game end to prevent unnecessary re-renders\n  const handleGameEndCallback = useCallback((score, reason = 'completed') => {\n    console.log('üéÆ Game ending with score:', score, 'Reason:', reason);\n    if (onGameEnd) {\n      onGameEnd(score, reason);\n    }\n  }, [onGameEnd]);\n\n  // Memoized callback for score update (to backend)\n  // This now directly calls the API function\n  const handleScoreUpdateCallback = useCallback(async scoreData => {\n    console.log('üìä Attempting to update score via API:', scoreData);\n    try {\n      const response = await updateGameScore(scoreData);\n      if (response.success) {\n        console.log('Score updated successfully on backend.');\n        // Optionally, if the backend returns the updated user, you might update currentUser here\n        // if (response.user) {\n        //   // This would require a prop to update currentUser in App.jsx\n        // }\n      } else {\n        console.error('Failed to update score on backend:', response.message);\n        // Optionally show a modal or alert the user about the failure\n      }\n    } catch (error) {\n      console.error('Error calling updateGameScore API:', error);\n      // Optionally show a modal or alert the user about the network error\n    }\n  }, []); // No dependencies on currentUser, as scoreData already contains userId etc.\n\n  // Timer effect\n  useEffect(() => {\n    let interval;\n    if (timerActive && timeRemaining > 0 && !isAnswerSubmitted) {\n      interval = setInterval(() => {\n        setTimeRemaining(prevTime => {\n          if (prevTime <= 1) {\n            clearInterval(interval);\n            setTimerActive(false);\n            setIsAnswerSubmitted(true);\n            const gameOverScore = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\n            setTimeout(() => {\n              if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n                handleScoreUpdateCallback({\n                  userId: currentUser.id,\n                  username: currentUser.username,\n                  pfpUrl: currentUser.pfpUrl,\n                  team: currentUser.team,\n                  score: gameOverScore,\n                  questionNumber: currentQuestionIndex + 1,\n                  timeUp: true,\n                  gameStatus: 'time_up'\n                });\n              }\n              handleGameEndCallback(gameOverScore, 'time_up');\n            }, 500);\n            return 0;\n          }\n          return prevTime - 1;\n        });\n      }, 1000);\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [timerActive, isAnswerSubmitted, timeRemaining, currentQuestionIndex, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\n\n  // Timer restart when moving to new question or game starts\n  useEffect(() => {\n    if (gameQuestions.length > 0 && gameQuestions[currentQuestionIndex] && !isAnswerSubmitted) {\n      setTimeRemaining(60);\n      setTimerActive(true);\n      setHasUpdatedScoreForCurrentQuestion(false);\n    } else if (isAnswerSubmitted) {\n      setTimerActive(false);\n    }\n  }, [currentQuestionIndex, gameQuestions.length, isAnswerSubmitted]);\n\n  // Initialize game questions on component mount from local data\n  useEffect(() => {\n    // Shuffle questions to ensure a random order each game\n    const shuffledQuestions = [...questions].sort(() => Math.random() - 0.5);\n    setGameQuestions(shuffledQuestions.slice(0, 10)); // Take the first 10 random questions\n    setCurrentQuestionIndex(0);\n    setSelectedAnswerIndex(null);\n    setRemovedAnswers([]);\n    setIsAnswerSubmitted(false);\n    setLifelines({\n      fiftyFifty: true,\n      phoneAddy: true,\n      phoneYinger: true,\n      askAudience: true\n    });\n    setHasUpdatedScoreForCurrentQuestion(false);\n    console.log('üéØ Game questions loaded from local data.');\n  }, []); // Empty dependency array means this runs once on mount\n\n  // Update leaderboard/score on backend when moving to a new question (or game start)\n  useEffect(() => {\n    if (gameQuestions.length > 0 && currentUser !== null && currentUser !== void 0 && currentUser.id && !hasUpdatedScoreForCurrentQuestion) {\n      const scoreToUpdate = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\n      console.log(`üìà Score update for entering question ${currentQuestionIndex + 1}, secured score: ${scoreToUpdate}`);\n      handleScoreUpdateCallback({\n        userId: currentUser.id,\n        username: currentUser.username,\n        pfpUrl: currentUser.pfpUrl,\n        team: currentUser.team,\n        score: scoreToUpdate,\n        questionNumber: currentQuestionIndex + 1,\n        gameStatus: 'in_progress'\n      });\n      setHasUpdatedScoreForCurrentQuestion(true);\n    }\n  }, [currentQuestionIndex, gameQuestions, currentUser, handleScoreUpdateCallback, hasUpdatedScoreForCurrentQuestion, prizeStructure]);\n  const handleAnswerSelect = useCallback(answerIndex => {\n    if (removedAnswers.includes(answerIndex) || isAnswerSubmitted) return;\n    setSelectedAnswerIndex(answerIndex);\n  }, [removedAnswers, isAnswerSubmitted]);\n\n  // Submit Answer function\n  const submitAnswer = useCallback(() => {\n    if (selectedAnswerIndex === null || !gameQuestions[currentQuestionIndex] || isAnswerSubmitted) {\n      setModalMessage('Please select an answer before submitting.');\n      setShowModal(true);\n      return;\n    }\n    console.log(`üéØ Submitting answer ${selectedAnswerIndex} for question ${currentQuestionIndex + 1}`);\n    setIsAnswerSubmitted(true);\n    setTimerActive(false);\n    const currentQuestionData = gameQuestions[currentQuestionIndex];\n    const correct = currentQuestionData.correctAnswer === selectedAnswerIndex;\n    setTimeout(() => {\n      if (correct) {\n        setModalMessage('‚úÖ Correct Answer!');\n        setShowModal(true);\n        if (currentQuestionIndex === 9) {\n          const finalScore = prizeStructure[currentQuestionIndex];\n          console.log('üéâ Game completed! Final score:', finalScore);\n          if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n            handleScoreUpdateCallback({\n              userId: currentUser.id,\n              username: currentUser.username,\n              pfpUrl: currentUser.pfpUrl,\n              team: currentUser.team,\n              score: finalScore,\n              questionNumber: currentQuestionIndex + 1,\n              completed: true,\n              gameStatus: 'finished'\n            });\n          }\n          handleGameEndCallback(finalScore, 'win');\n        } else {\n          console.log(`‚úÖ Correct answer! Moving to question ${currentQuestionIndex + 2}`);\n          setCurrentQuestionIndex(prev => prev + 1);\n          setSelectedAnswerIndex(null);\n          setRemovedAnswers([]);\n          setIsAnswerSubmitted(false);\n          setHasUpdatedScoreForCurrentQuestion(false);\n        }\n      } else {\n        setModalMessage('‚ùå Wrong Answer! Game Over.');\n        setShowModal(true);\n        const gameOverScore = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\n        console.log('‚ùå Wrong answer! Game over with score:', gameOverScore);\n        if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n          handleScoreUpdateCallback({\n            userId: currentUser.id,\n            username: currentUser.username,\n            pfpUrl: currentUser.pfpUrl,\n            team: currentUser.team,\n            score: gameOverScore,\n            questionNumber: currentQuestionIndex + 1,\n            failed: true,\n            gameStatus: 'game_over'\n          });\n        }\n        handleGameEndCallback(gameOverScore, 'lose');\n      }\n    }, 2000);\n  }, [selectedAnswerIndex, gameQuestions, currentQuestionIndex, isAnswerSubmitted, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\n\n  // Callback to handle lifeline usage from the Lifeline component\n  const handleLifelineUse = useCallback(type => {\n    console.log('Using lifeline:', type);\n    setLifelines(prev => ({\n      ...prev,\n      [type]: false\n    }));\n    const currentQuestionData = gameQuestions[currentQuestionIndex];\n    if (!currentQuestionData) return;\n    if (type === 'fiftyFifty') {\n      const incorrectAnswers = currentQuestionData.options.map((_, i) => i).filter(i => i !== currentQuestionData.correctAnswer);\n      const answersToRemove = [];\n      while (answersToRemove.length < 2 && incorrectAnswers.length > 0) {\n        const randomIndex = Math.floor(Math.random() * incorrectAnswers.length);\n        answersToRemove.push(incorrectAnswers.splice(randomIndex, 1)[0]);\n      }\n      setRemovedAnswers(answersToRemove);\n      setModalMessage('50/50 used! Two incorrect answers have been removed.');\n      setShowModal(true);\n    } else if (type === 'phoneAddy' || type === 'phoneYinger') {\n      setModalMessage(`Your friend says the correct answer is: ${String.fromCharCode(65 + currentQuestionData.correctAnswer)} (${currentQuestionData.options[currentQuestionData.correctAnswer]})`);\n      setShowModal(true);\n    } else if (type === 'askAudience') {\n      const votes = {};\n      const correctAnswerIndex = currentQuestionData.correctAnswer;\n      const totalVotes = 100;\n      let remainingVotes = totalVotes;\n      const correctVotes = Math.floor(Math.random() * (60 - 40 + 1)) + 40;\n      votes[correctAnswerIndex] = correctVotes;\n      remainingVotes -= correctVotes;\n      const otherOptions = currentQuestionData.options.map((_, i) => i).filter(i => i !== correctAnswerIndex);\n      const numOtherOptions = otherOptions.length;\n      otherOptions.forEach((optionIndex, idx) => {\n        if (idx === numOtherOptions - 1) {\n          votes[optionIndex] = remainingVotes;\n        } else {\n          const voteShare = Math.floor(Math.random() * (remainingVotes / (numOtherOptions - idx) * 1.5));\n          votes[optionIndex] = voteShare;\n          remainingVotes -= voteShare;\n        }\n      });\n      let audienceMessage = 'Audience votes:\\n';\n      currentQuestionData.options.forEach((option, index) => {\n        audienceMessage += `${String.fromCharCode(65 + index)}: ${votes[index] || 0}%\\n`;\n      });\n      setModalMessage(audienceMessage);\n      setShowModal(true);\n    }\n  }, [gameQuestions, currentQuestionIndex]);\n\n  // Walk Away function\n  const walkAway = useCallback(() => {\n    if (currentQuestionIndex === 0) {\n      setModalMessage('You cannot walk away on the first question. You must answer!');\n      setShowModal(true);\n      return;\n    }\n    setTimerActive(false);\n    setIsAnswerSubmitted(true);\n    const currentPrizeSecured = prizeStructure[currentQuestionIndex - 1];\n    console.log('üö∂ Player walking away with:', currentPrizeSecured);\n    if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n      handleScoreUpdateCallback({\n        userId: currentUser.id,\n        username: currentUser.username,\n        pfpUrl: currentUser.pfpUrl,\n        team: currentUser.team,\n        score: currentPrizeSecured,\n        questionNumber: currentQuestionIndex,\n        walkedAway: true,\n        gameStatus: 'walked_away'\n      });\n    }\n    handleGameEndCallback(currentPrizeSecured, 'walk_away');\n  }, [currentQuestionIndex, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\n\n  // Handle leaderboard navigation with logging\n  const handleLeaderboardClick = useCallback(() => {\n    console.log('üèÜ Navigating to leaderboard...');\n    if (onNavigateToLeaderboard) {\n      onNavigateToLeaderboard();\n    } else {\n      console.error('‚ùå onNavigateToLeaderboard function not provided');\n      setModalMessage('Leaderboard navigation is not available.');\n      setShowModal(true);\n    }\n  }, [onNavigateToLeaderboard]);\n\n  // Memoized timer functions for dynamic styling\n  const getTimerColor = useCallback(() => {\n    if (timeRemaining > 30) return '#B0FF6F';\n    if (timeRemaining > 15) return '#FF955E';\n    return '#FF54D7';\n  }, [timeRemaining]);\n  const getTimerText = useCallback(() => {\n    if (timeRemaining > 30) return 'üü¢';\n    if (timeRemaining > 15) return 'üü°';\n    return 'üî¥';\n  }, [timeRemaining]);\n\n  // Early return for loading state or if questions aren't loaded yet\n  if (gameQuestions.length === 0 || !gameQuestions[currentQuestionIndex]) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-loading-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-text\",\n          children: \"Loading questions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this);\n  }\n  const currentQuestionData = gameQuestions[currentQuestionIndex];\n  const currentPrizePotential = prizeStructure[currentQuestionIndex];\n  const timerColor = getTimerColor();\n  const timerText = getTimerText();\n\n  // Debug log for current state\n  console.log('üéÆ GamePage Render:', {\n    questionNumber: currentQuestionIndex + 1,\n    currentPrizePotential,\n    timeRemaining,\n    timerActive,\n    isAnswerSubmitted,\n    hasUpdatedScore: hasUpdatedScoreForCurrentQuestion,\n    currentUser: currentUser === null || currentUser === void 0 ? void 0 : currentUser.username,\n    currentTeam: currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$team = currentUser.team) === null || _currentUser$team === void 0 ? void 0 : _currentUser$team.name\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background-animation\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"floating-shapes\",\n        children: [...Array(20)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `shape shape-${i % 4}`\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-content-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.pfpUrl) || 'https://placehold.co/50x50/cccccc/000000?text=PFP',\n            alt: \"Profile\",\n            className: \"user-pfp\",\n            onError: e => {\n              e.target.onerror = null;\n              e.target.src = 'https://placehold.co/50x50/cccccc/000000?text=PFP';\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"user-username\",\n            children: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.username) || 'User'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-team\",\n            style: {\n              backgroundColor: (currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$team2 = currentUser.team) === null || _currentUser$team2 === void 0 ? void 0 : _currentUser$team2.color) || '#000'\n            },\n            children: (currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$team3 = currentUser.team) === null || _currentUser$team3 === void 0 ? void 0 : _currentUser$team3.name) || 'Team'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current-prize\",\n            children: [currentPrizePotential === null || currentPrizePotential === void 0 ? void 0 : currentPrizePotential.toLocaleString(), \" $PROVE\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-number\",\n            children: [\"Question \", currentQuestionIndex + 1, \" of 10\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"leaderboard-button\",\n            onClick: handleLeaderboardClick,\n            type: \"button\",\n            title: \"View Leaderboard\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"leaderboard-icon\",\n              children: \"\\uD83C\\uDFC6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"leaderboard-text\",\n              children: \"Leaderboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lifelines-timer-section\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `timer-display ${timeRemaining <= 10 ? 'timer-critical' : ''}`,\n              style: {\n                color: timerColor,\n                borderColor: timerColor,\n                boxShadow: `0 0 10px ${timerColor}80`\n              },\n              children: [timerText, \" \", timeRemaining, \"s\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-game-layout\",\n        children: [/*#__PURE__*/_jsxDEV(Lifeline, {\n          lifelines: lifelines,\n          onLifelineUse: handleLifelineUse,\n          currentQuestion: currentQuestionData,\n          isAnswerSubmitted: isAnswerSubmitted,\n          onRemovedAnswers: setRemovedAnswers\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"question-text\",\n              children: currentQuestionData.question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"answers-grid\",\n              children: currentQuestionData.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `answer-button ${selectedAnswerIndex === index ? 'selected' : ''} ${removedAnswers.includes(index) ? 'removed' : ''} ${isAnswerSubmitted ? index === currentQuestionData.correctAnswer ? 'correct' : selectedAnswerIndex === index ? 'incorrect' : '' : ''}`,\n                onClick: () => handleAnswerSelect(index),\n                disabled: removedAnswers.includes(index) || isAnswerSubmitted,\n                type: \"button\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"answer-letter\",\n                  children: String.fromCharCode(65 + index)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 474,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"answer-text\",\n                  children: option\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 475,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"action-buttons\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"walk-away-button\",\n                onClick: walkAway,\n                disabled: isAnswerSubmitted || currentQuestionIndex === 0,\n                type: \"button\",\n                children: [\"Walk Away\", currentQuestionIndex > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"walk-away-amount\",\n                  children: [\"(\", (_prizeStructure = prizeStructure[currentQuestionIndex - 1]) === null || _prizeStructure === void 0 ? void 0 : _prizeStructure.toLocaleString(), \" $PROVE)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 489,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"submit-button\",\n                onClick: submitAnswer,\n                disabled: selectedAnswerIndex === null || isAnswerSubmitted,\n                type: \"button\",\n                children: isAnswerSubmitted ? 'Processing...' : 'Final Answer'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prize-ladder\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prize-ladder-header\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"prize-ladder-title\",\n              children: \"\\uD83D\\uDCB0 PRIZE LADDER\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 13\n          }, this), [...prizeStructure].reverse().map((prize, reverseIndex) => {\n            const actualIndex = prizeStructure.length - 1 - reverseIndex;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `prize-item ${actualIndex === currentQuestionIndex ? 'current' : ''} ${actualIndex < currentQuestionIndex ? 'completed' : ''}`,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"prize-number\",\n                children: actualIndex + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 519,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"prize-amount\",\n                children: [prize.toLocaleString(), \" $PROVE\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 19\n              }, this)]\n            }, actualIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onClose: () => setShowModal(false),\n      message: modalMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 379,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"DrM/0zaVlo1NhyLswkdcSsWUI18=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","questions","Lifeline","Modal","updateGameScore","jsxDEV","_jsxDEV","GamePage","currentUser","onGameEnd","onScoreUpdate","onNavigateToLeaderboard","_s","_currentUser$team","_currentUser$team2","_currentUser$team3","_prizeStructure","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswerIndex","setSelectedAnswerIndex","gameQuestions","setGameQuestions","lifelines","setLifelines","fiftyFifty","phoneAddy","phoneYinger","askAudience","removedAnswers","setRemovedAnswers","isAnswerSubmitted","setIsAnswerSubmitted","timeRemaining","setTimeRemaining","timerActive","setTimerActive","hasUpdatedScoreForCurrentQuestion","setHasUpdatedScoreForCurrentQuestion","showModal","setShowModal","modalMessage","setModalMessage","prizeStructure","handleGameEndCallback","score","reason","console","log","handleScoreUpdateCallback","scoreData","response","success","error","message","interval","setInterval","prevTime","clearInterval","gameOverScore","setTimeout","id","userId","username","pfpUrl","team","questionNumber","timeUp","gameStatus","length","shuffledQuestions","sort","Math","random","slice","scoreToUpdate","handleAnswerSelect","answerIndex","includes","submitAnswer","currentQuestionData","correct","correctAnswer","finalScore","completed","prev","failed","handleLifelineUse","type","incorrectAnswers","options","map","_","i","filter","answersToRemove","randomIndex","floor","push","splice","String","fromCharCode","votes","correctAnswerIndex","totalVotes","remainingVotes","correctVotes","otherOptions","numOtherOptions","forEach","optionIndex","idx","voteShare","audienceMessage","option","index","walkAway","currentPrizeSecured","walkedAway","handleLeaderboardClick","getTimerColor","getTimerText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","currentPrizePotential","timerColor","timerText","hasUpdatedScore","currentTeam","name","Array","src","alt","onError","e","target","onerror","style","backgroundColor","color","toLocaleString","onClick","title","borderColor","boxShadow","onLifelineUse","currentQuestion","onRemovedAnswers","question","disabled","reverse","prize","reverseIndex","actualIndex","show","onClose","_c","$RefreshReg$"],"sources":["C:/Users/HELLO/Desktop/provernaire-game/frontend/src/pages/GamePage.jsx"],"sourcesContent":["// frontend/src/pages/GamePage.jsx\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { questions } from '../data/questions'; // RE-ADDED: Using mock data for questions\r\nimport Lifeline from '../components/Lifeline/Lifeline';\r\nimport './GamePage.css';\r\nimport Modal from '../components/Modal/Modal';\r\nimport { updateGameScore } from '../api/api'; // getGameQuestions removed as it's no longer needed\r\n\r\n/**\r\n * GamePage Component\r\n * Manages the main game logic, question display, answer submission, lifelines, and score tracking.\r\n * @param {Object} currentUser - The current logged-in user object { id, username, pfpUrl, team: { name, color } }.\r\n * @param {function} onGameEnd - Callback function to transition to the result screen, passing final score.\r\n * @param {function} onScoreUpdate - Callback function to update score on the backend (e.g., after each question).\r\n * @param {function} onNavigateToLeaderboard - Callback function to navigate to the leaderboard screen.\r\n */\r\nconst GamePage = ({ currentUser, onGameEnd, onScoreUpdate, onNavigateToLeaderboard }) => {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswerIndex, setSelectedAnswerIndex] = useState(null);\r\n  const [gameQuestions, setGameQuestions] = useState([]); // Will be initialized from local data\r\n  const [lifelines, setLifelines] = useState({\r\n    fiftyFifty: true,\r\n    phoneAddy: true,\r\n    phoneYinger: true,\r\n    askAudience: true\r\n  });\r\n  const [removedAnswers, setRemovedAnswers] = useState([]);\r\n  const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false);\r\n  const [timeRemaining, setTimeRemaining] = useState(60);\r\n  const [timerActive, setTimerActive] = useState(false);\r\n  const [hasUpdatedScoreForCurrentQuestion, setHasUpdatedScoreForCurrentQuestion] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalMessage, setModalMessage] = useState('');\r\n\r\n  // Updated prize structure: Question 1 = 1,000, Question 10 = 1,000,000\r\n  const prizeStructure = [\r\n    1000, 2500, 5000, 10000, 25000, 50000, 100000, 250000, 500000, 1000000\r\n  ];\r\n\r\n  // Memoized callback for game end to prevent unnecessary re-renders\r\n  const handleGameEndCallback = useCallback((score, reason = 'completed') => {\r\n    console.log('üéÆ Game ending with score:', score, 'Reason:', reason);\r\n    if (onGameEnd) {\r\n      onGameEnd(score, reason);\r\n    }\r\n  }, [onGameEnd]);\r\n\r\n  // Memoized callback for score update (to backend)\r\n  // This now directly calls the API function\r\n  const handleScoreUpdateCallback = useCallback(async (scoreData) => {\r\n    console.log('üìä Attempting to update score via API:', scoreData);\r\n    try {\r\n      const response = await updateGameScore(scoreData);\r\n      if (response.success) {\r\n        console.log('Score updated successfully on backend.');\r\n        // Optionally, if the backend returns the updated user, you might update currentUser here\r\n        // if (response.user) {\r\n        //   // This would require a prop to update currentUser in App.jsx\r\n        // }\r\n      } else {\r\n        console.error('Failed to update score on backend:', response.message);\r\n        // Optionally show a modal or alert the user about the failure\r\n      }\r\n    } catch (error) {\r\n      console.error('Error calling updateGameScore API:', error);\r\n      // Optionally show a modal or alert the user about the network error\r\n    }\r\n  }, []); // No dependencies on currentUser, as scoreData already contains userId etc.\r\n\r\n  // Timer effect\r\n  useEffect(() => {\r\n    let interval;\r\n\r\n    if (timerActive && timeRemaining > 0 && !isAnswerSubmitted) {\r\n      interval = setInterval(() => {\r\n        setTimeRemaining(prevTime => {\r\n          if (prevTime <= 1) {\r\n            clearInterval(interval);\r\n            setTimerActive(false);\r\n            setIsAnswerSubmitted(true);\r\n\r\n            const gameOverScore = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\r\n\r\n            setTimeout(() => {\r\n              if (currentUser?.id) {\r\n                handleScoreUpdateCallback({\r\n                  userId: currentUser.id,\r\n                  username: currentUser.username,\r\n                  pfpUrl: currentUser.pfpUrl,\r\n                  team: currentUser.team,\r\n                  score: gameOverScore,\r\n                  questionNumber: currentQuestionIndex + 1,\r\n                  timeUp: true,\r\n                  gameStatus: 'time_up'\r\n                });\r\n              }\r\n              handleGameEndCallback(gameOverScore, 'time_up');\r\n            }, 500);\r\n\r\n            return 0;\r\n          }\r\n          return prevTime - 1;\r\n        });\r\n      }, 1000);\r\n    }\r\n\r\n    return () => {\r\n      if (interval) {\r\n        clearInterval(interval);\r\n      }\r\n    };\r\n  }, [timerActive, isAnswerSubmitted, timeRemaining, currentQuestionIndex, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\r\n\r\n  // Timer restart when moving to new question or game starts\r\n  useEffect(() => {\r\n    if (gameQuestions.length > 0 && gameQuestions[currentQuestionIndex] && !isAnswerSubmitted) {\r\n      setTimeRemaining(60);\r\n      setTimerActive(true);\r\n      setHasUpdatedScoreForCurrentQuestion(false);\r\n    } else if (isAnswerSubmitted) {\r\n      setTimerActive(false);\r\n    }\r\n  }, [currentQuestionIndex, gameQuestions.length, isAnswerSubmitted]);\r\n\r\n  // Initialize game questions on component mount from local data\r\n  useEffect(() => {\r\n    // Shuffle questions to ensure a random order each game\r\n    const shuffledQuestions = [...questions].sort(() => Math.random() - 0.5);\r\n    setGameQuestions(shuffledQuestions.slice(0, 10)); // Take the first 10 random questions\r\n    setCurrentQuestionIndex(0);\r\n    setSelectedAnswerIndex(null);\r\n    setRemovedAnswers([]);\r\n    setIsAnswerSubmitted(false);\r\n    setLifelines({\r\n      fiftyFifty: true,\r\n      phoneAddy: true,\r\n      phoneYinger: true,\r\n      askAudience: true\r\n    });\r\n    setHasUpdatedScoreForCurrentQuestion(false);\r\n    console.log('üéØ Game questions loaded from local data.');\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  // Update leaderboard/score on backend when moving to a new question (or game start)\r\n  useEffect(() => {\r\n    if (gameQuestions.length > 0 && currentUser?.id && !hasUpdatedScoreForCurrentQuestion) {\r\n      const scoreToUpdate = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\r\n\r\n      console.log(`üìà Score update for entering question ${currentQuestionIndex + 1}, secured score: ${scoreToUpdate}`);\r\n\r\n      handleScoreUpdateCallback({\r\n        userId: currentUser.id,\r\n        username: currentUser.username,\r\n        pfpUrl: currentUser.pfpUrl,\r\n        team: currentUser.team,\r\n        score: scoreToUpdate,\r\n        questionNumber: currentQuestionIndex + 1,\r\n        gameStatus: 'in_progress'\r\n      });\r\n\r\n      setHasUpdatedScoreForCurrentQuestion(true);\r\n    }\r\n  }, [currentQuestionIndex, gameQuestions, currentUser, handleScoreUpdateCallback, hasUpdatedScoreForCurrentQuestion, prizeStructure]);\r\n\r\n\r\n  const handleAnswerSelect = useCallback((answerIndex) => {\r\n    if (removedAnswers.includes(answerIndex) || isAnswerSubmitted) return;\r\n    setSelectedAnswerIndex(answerIndex);\r\n  }, [removedAnswers, isAnswerSubmitted]);\r\n\r\n  // Submit Answer function\r\n  const submitAnswer = useCallback(() => {\r\n    if (selectedAnswerIndex === null || !gameQuestions[currentQuestionIndex] || isAnswerSubmitted) {\r\n      setModalMessage('Please select an answer before submitting.');\r\n      setShowModal(true);\r\n      return;\r\n    }\r\n\r\n    console.log(`üéØ Submitting answer ${selectedAnswerIndex} for question ${currentQuestionIndex + 1}`);\r\n    setIsAnswerSubmitted(true);\r\n    setTimerActive(false);\r\n\r\n    const currentQuestionData = gameQuestions[currentQuestionIndex];\r\n    const correct = currentQuestionData.correctAnswer === selectedAnswerIndex;\r\n\r\n    setTimeout(() => {\r\n      if (correct) {\r\n        setModalMessage('‚úÖ Correct Answer!');\r\n        setShowModal(true);\r\n\r\n        if (currentQuestionIndex === 9) {\r\n          const finalScore = prizeStructure[currentQuestionIndex];\r\n          console.log('üéâ Game completed! Final score:', finalScore);\r\n          if (currentUser?.id) {\r\n            handleScoreUpdateCallback({\r\n              userId: currentUser.id,\r\n              username: currentUser.username,\r\n              pfpUrl: currentUser.pfpUrl,\r\n              team: currentUser.team,\r\n              score: finalScore,\r\n              questionNumber: currentQuestionIndex + 1,\r\n              completed: true,\r\n              gameStatus: 'finished'\r\n            });\r\n          }\r\n          handleGameEndCallback(finalScore, 'win');\r\n        } else {\r\n          console.log(`‚úÖ Correct answer! Moving to question ${currentQuestionIndex + 2}`);\r\n          setCurrentQuestionIndex(prev => prev + 1);\r\n          setSelectedAnswerIndex(null);\r\n          setRemovedAnswers([]);\r\n          setIsAnswerSubmitted(false);\r\n          setHasUpdatedScoreForCurrentQuestion(false);\r\n        }\r\n      } else {\r\n        setModalMessage('‚ùå Wrong Answer! Game Over.');\r\n        setShowModal(true);\r\n\r\n        const gameOverScore = currentQuestionIndex > 0 ? prizeStructure[currentQuestionIndex - 1] : 0;\r\n        console.log('‚ùå Wrong answer! Game over with score:', gameOverScore);\r\n        if (currentUser?.id) {\r\n          handleScoreUpdateCallback({\r\n            userId: currentUser.id,\r\n            username: currentUser.username,\r\n            pfpUrl: currentUser.pfpUrl,\r\n            team: currentUser.team,\r\n            score: gameOverScore,\r\n            questionNumber: currentQuestionIndex + 1,\r\n            failed: true,\r\n            gameStatus: 'game_over'\r\n          });\r\n        }\r\n        handleGameEndCallback(gameOverScore, 'lose');\r\n      }\r\n    }, 2000);\r\n  }, [selectedAnswerIndex, gameQuestions, currentQuestionIndex, isAnswerSubmitted, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\r\n\r\n  // Callback to handle lifeline usage from the Lifeline component\r\n  const handleLifelineUse = useCallback((type) => {\r\n    console.log('Using lifeline:', type);\r\n    setLifelines(prev => ({ ...prev, [type]: false }));\r\n\r\n    const currentQuestionData = gameQuestions[currentQuestionIndex];\r\n    if (!currentQuestionData) return;\r\n\r\n    if (type === 'fiftyFifty') {\r\n      const incorrectAnswers = currentQuestionData.options\r\n        .map((_, i) => i)\r\n        .filter(i => i !== currentQuestionData.correctAnswer);\r\n\r\n      const answersToRemove = [];\r\n      while (answersToRemove.length < 2 && incorrectAnswers.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * incorrectAnswers.length);\r\n        answersToRemove.push(incorrectAnswers.splice(randomIndex, 1)[0]);\r\n      }\r\n      setRemovedAnswers(answersToRemove);\r\n      setModalMessage('50/50 used! Two incorrect answers have been removed.');\r\n      setShowModal(true);\r\n    } else if (type === 'phoneAddy' || type === 'phoneYinger') {\r\n      setModalMessage(`Your friend says the correct answer is: ${String.fromCharCode(65 + currentQuestionData.correctAnswer)} (${currentQuestionData.options[currentQuestionData.correctAnswer]})`);\r\n      setShowModal(true);\r\n    } else if (type === 'askAudience') {\r\n      const votes = {};\r\n      const correctAnswerIndex = currentQuestionData.correctAnswer;\r\n      const totalVotes = 100;\r\n      let remainingVotes = totalVotes;\r\n\r\n      const correctVotes = Math.floor(Math.random() * (60 - 40 + 1)) + 40;\r\n      votes[correctAnswerIndex] = correctVotes;\r\n      remainingVotes -= correctVotes;\r\n\r\n      const otherOptions = currentQuestionData.options.map((_, i) => i).filter(i => i !== correctAnswerIndex);\r\n      const numOtherOptions = otherOptions.length;\r\n\r\n      otherOptions.forEach((optionIndex, idx) => {\r\n        if (idx === numOtherOptions - 1) {\r\n          votes[optionIndex] = remainingVotes;\r\n        } else {\r\n          const voteShare = Math.floor(Math.random() * (remainingVotes / (numOtherOptions - idx) * 1.5));\r\n          votes[optionIndex] = voteShare;\r\n          remainingVotes -= voteShare;\r\n        }\r\n      });\r\n\r\n      let audienceMessage = 'Audience votes:\\n';\r\n      currentQuestionData.options.forEach((option, index) => {\r\n        audienceMessage += `${String.fromCharCode(65 + index)}: ${votes[index] || 0}%\\n`;\r\n      });\r\n      setModalMessage(audienceMessage);\r\n      setShowModal(true);\r\n    }\r\n  }, [gameQuestions, currentQuestionIndex]);\r\n\r\n\r\n  // Walk Away function\r\n  const walkAway = useCallback(() => {\r\n    if (currentQuestionIndex === 0) {\r\n      setModalMessage('You cannot walk away on the first question. You must answer!');\r\n      setShowModal(true);\r\n      return;\r\n    }\r\n\r\n    setTimerActive(false);\r\n    setIsAnswerSubmitted(true);\r\n\r\n    const currentPrizeSecured = prizeStructure[currentQuestionIndex - 1];\r\n    console.log('üö∂ Player walking away with:', currentPrizeSecured);\r\n\r\n    if (currentUser?.id) {\r\n      handleScoreUpdateCallback({\r\n        userId: currentUser.id,\r\n        username: currentUser.username,\r\n        pfpUrl: currentUser.pfpUrl,\r\n        team: currentUser.team,\r\n        score: currentPrizeSecured,\r\n        questionNumber: currentQuestionIndex,\r\n        walkedAway: true,\r\n        gameStatus: 'walked_away'\r\n      });\r\n    }\r\n    handleGameEndCallback(currentPrizeSecured, 'walk_away');\r\n  }, [currentQuestionIndex, prizeStructure, currentUser, handleScoreUpdateCallback, handleGameEndCallback]);\r\n\r\n  // Handle leaderboard navigation with logging\r\n  const handleLeaderboardClick = useCallback(() => {\r\n    console.log('üèÜ Navigating to leaderboard...');\r\n    if (onNavigateToLeaderboard) {\r\n      onNavigateToLeaderboard();\r\n    } else {\r\n      console.error('‚ùå onNavigateToLeaderboard function not provided');\r\n      setModalMessage('Leaderboard navigation is not available.');\r\n      setShowModal(true);\r\n    }\r\n  }, [onNavigateToLeaderboard]);\r\n\r\n  // Memoized timer functions for dynamic styling\r\n  const getTimerColor = useCallback(() => {\r\n    if (timeRemaining > 30) return '#B0FF6F';\r\n    if (timeRemaining > 15) return '#FF955E';\r\n    return '#FF54D7';\r\n  }, [timeRemaining]);\r\n\r\n  const getTimerText = useCallback(() => {\r\n    if (timeRemaining > 30) return 'üü¢';\r\n    if (timeRemaining > 15) return 'üü°';\r\n    return 'üî¥';\r\n  }, [timeRemaining]);\r\n\r\n  // Early return for loading state or if questions aren't loaded yet\r\n  if (gameQuestions.length === 0 || !gameQuestions[currentQuestionIndex]) {\r\n    return (\r\n      <div className=\"game-loading-screen\">\r\n        <div className=\"loading-content\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <div className=\"loading-text\">Loading questions...</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const currentQuestionData = gameQuestions[currentQuestionIndex];\r\n  const currentPrizePotential = prizeStructure[currentQuestionIndex];\r\n  const timerColor = getTimerColor();\r\n  const timerText = getTimerText();\r\n\r\n  // Debug log for current state\r\n  console.log('üéÆ GamePage Render:', {\r\n    questionNumber: currentQuestionIndex + 1,\r\n    currentPrizePotential,\r\n    timeRemaining,\r\n    timerActive,\r\n    isAnswerSubmitted,\r\n    hasUpdatedScore: hasUpdatedScoreForCurrentQuestion,\r\n    currentUser: currentUser?.username,\r\n    currentTeam: currentUser?.team?.name,\r\n  });\r\n\r\n  return (\r\n    <div className=\"game-page-container\">\r\n      {/* Background Animation */}\r\n      <div className=\"background-animation\">\r\n        <div className=\"floating-shapes\">\r\n          {[...Array(20)].map((_, i) => (\r\n            <div key={i} className={`shape shape-${i % 4}`}></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"game-content-wrapper\">\r\n        {/* Header */}\r\n        <div className=\"game-header\">\r\n          <div className=\"user-info\">\r\n            <img\r\n              src={currentUser?.pfpUrl || 'https://placehold.co/50x50/cccccc/000000?text=PFP'}\r\n              alt=\"Profile\"\r\n              className=\"user-pfp\"\r\n              onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/50x50/cccccc/000000?text=PFP'; }}\r\n            />\r\n            <span className=\"user-username\">{currentUser?.username || 'User'}</span>\r\n            <div\r\n              className=\"user-team\"\r\n              style={{ backgroundColor: currentUser?.team?.color || '#000' }}\r\n            >\r\n              {currentUser?.team?.name || 'Team'}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"score-info\">\r\n            <div className=\"current-prize\">\r\n              {currentPrizePotential?.toLocaleString()} $PROVE\r\n            </div>\r\n            <div className=\"question-number\">\r\n              Question {currentQuestionIndex + 1} of 10\r\n            </div>\r\n          </div>\r\n\r\n          {/* Header Actions */}\r\n          <div className=\"header-actions\">\r\n            {/* Leaderboard Button */}\r\n            <button\r\n              className=\"leaderboard-button\"\r\n              onClick={handleLeaderboardClick}\r\n              type=\"button\"\r\n              title=\"View Leaderboard\"\r\n            >\r\n              <span className=\"leaderboard-icon\">üèÜ</span>\r\n              <span className=\"leaderboard-text\">Leaderboard</span>\r\n            </button>\r\n\r\n            {/* Compact Lifelines and Timer Section */}\r\n            <div className=\"lifelines-timer-section\">\r\n              {/* Timer Display */}\r\n              <div\r\n                className={`timer-display ${timeRemaining <= 10 ? 'timer-critical' : ''}`}\r\n                style={{\r\n                  color: timerColor,\r\n                  borderColor: timerColor,\r\n                  boxShadow: `0 0 10px ${timerColor}80`\r\n                }}\r\n              >\r\n                {timerText} {timeRemaining}s\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Main Game Layout: Lifelines (Left) | Question (Center) | Prize Ladder (Right) */}\r\n        <div className=\"main-game-layout\">\r\n          {/* Lifelines on the left */}\r\n          <Lifeline\r\n            lifelines={lifelines}\r\n            onLifelineUse={handleLifelineUse}\r\n            currentQuestion={currentQuestionData}\r\n            isAnswerSubmitted={isAnswerSubmitted}\r\n            onRemovedAnswers={setRemovedAnswers}\r\n          />\r\n\r\n          {/* Question in the center */}\r\n          <div className=\"question-container\">\r\n            <div className=\"question-card\">\r\n              <h2 className=\"question-text\">\r\n                {currentQuestionData.question}\r\n              </h2>\r\n\r\n              <div className=\"answers-grid\">\r\n                {currentQuestionData.options.map((option, index) => (\r\n                  <button\r\n                    key={index}\r\n                    className={`answer-button ${selectedAnswerIndex === index ? 'selected' : ''} ${removedAnswers.includes(index) ? 'removed' : ''} ${isAnswerSubmitted ? (index === currentQuestionData.correctAnswer ? 'correct' : (selectedAnswerIndex === index ? 'incorrect' : '')) : ''}`}\r\n                    onClick={() => handleAnswerSelect(index)}\r\n                    disabled={removedAnswers.includes(index) || isAnswerSubmitted}\r\n                    type=\"button\"\r\n                  >\r\n                    <span className=\"answer-letter\">{String.fromCharCode(65 + index)}</span>\r\n                    <span className=\"answer-text\">{option}</span>\r\n                  </button>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"action-buttons\">\r\n                <button\r\n                  className=\"walk-away-button\"\r\n                  onClick={walkAway}\r\n                  disabled={isAnswerSubmitted || currentQuestionIndex === 0}\r\n                  type=\"button\"\r\n                >\r\n                  Walk Away\r\n                  {currentQuestionIndex > 0 && (\r\n                    <span className=\"walk-away-amount\">\r\n                      ({prizeStructure[currentQuestionIndex - 1]?.toLocaleString()} $PROVE)\r\n                    </span>\r\n                  )}\r\n                </button>\r\n\r\n                <button\r\n                  className=\"submit-button\"\r\n                  onClick={submitAnswer}\r\n                  disabled={selectedAnswerIndex === null || isAnswerSubmitted}\r\n                  type=\"button\"\r\n                >\r\n                  {isAnswerSubmitted ? 'Processing...' : 'Final Answer'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Prize Ladder on the right */}\r\n          <div className=\"prize-ladder\">\r\n            <div className=\"prize-ladder-header\">\r\n              <h4 className=\"prize-ladder-title\">üí∞ PRIZE LADDER</h4>\r\n            </div>\r\n            {[...prizeStructure].reverse().map((prize, reverseIndex) => {\r\n              const actualIndex = prizeStructure.length - 1 - reverseIndex;\r\n              return (\r\n                <div\r\n                  key={actualIndex}\r\n                  className={`prize-item ${actualIndex === currentQuestionIndex ? 'current' : ''} ${actualIndex < currentQuestionIndex ? 'completed' : ''}`}\r\n                >\r\n                  <span className=\"prize-number\">{actualIndex + 1}</span>\r\n                  <span className=\"prize-amount\">{prize.toLocaleString()} $PROVE</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* Custom Modal for alerts */}\r\n      <Modal show={showModal} onClose={() => setShowModal(false)} message={modalMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}