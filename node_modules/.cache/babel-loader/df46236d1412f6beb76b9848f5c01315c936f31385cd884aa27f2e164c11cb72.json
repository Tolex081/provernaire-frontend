{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HELLO\\\\Desktop\\\\provernaire-game\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/App.jsx\nimport React, { useState, useEffect } from 'react';\nimport LoginPage from './pages/LoginPage';\nimport TeamSelectionPage from './pages/TeamSelectionPage';\nimport PreviewPage from './pages/PreviewPage';\nimport GamePage from './pages/GamePage';\n// import ResultPage from './pages/ResultPage'; // Uncomment when created\n// import LeaderboardPage from './pages/LeaderboardPage'; // Uncomment when created\nimport './App.css'; // Global CSS for the overall app layout/body\nimport Modal from './components/Modal/Modal'; // Import the Modal component\n\n/**\r\n * App Component\r\n * This is the main application component that handles routing/flow\r\n * between different screens based on user authentication and game state.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to hold the current user's data (username, pfpUrl, team, etc.)\n  const [currentUser, setCurrentUser] = useState(null);\n  // State to manage the currently active screen/page\n  const [currentScreen, setCurrentScreen] = useState('login'); // Initial screen\n  // State to store the result of the last game played\n  const [latestGameResult, setLatestGameResult] = useState(null);\n\n  // Modal states for global messages\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState('');\n\n  // Effect to load user data from local storage on initial app load\n  useEffect(() => {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser && storedUser.id && storedUser.username) {\n        // Basic validation\n        setCurrentUser(storedUser);\n        // Determine initial screen based on stored user data\n        if (storedUser.team && storedUser.team.name) {\n          setCurrentScreen('preview'); // If user has team, go to preview\n        } else {\n          setCurrentScreen('teamSelection'); // If user logged in but no team, go to team selection\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to parse user data from localStorage:\", error);\n      localStorage.removeItem('currentUser'); // Clear invalid data\n      setCurrentScreen('login'); // Fallback to login\n    }\n  }, []); // Empty dependency array means this runs once on mount\n\n  /**\r\n   * Callback function for successful login/registration.\r\n   * Updates the current user state and persists it to local storage.\r\n   * Transitions to the team selection screen.\r\n   * @param {Object} userData - The user object returned from the backend after login/registration.\r\n   */\n  const handleLoginSuccess = userData => {\n    setCurrentUser(userData);\n    localStorage.setItem('currentUser', JSON.stringify(userData)); // Persist user data\n    // After login, check if user already has a team.\n    if (userData.team && userData.team.name) {\n      setCurrentScreen('preview'); // If user has team, go to preview\n    } else {\n      setCurrentScreen('teamSelection'); // If new user or no team, go to team selection\n    }\n  };\n\n  /**\r\n   * Callback function for successful team selection.\r\n   * Updates the current user state with the new team information and persists it.\r\n   * Transitions to the preview screen.\r\n   * @param {Object} updatedUser - The user object with updated team information.\r\n   */\n  const handleTeamSelectionSuccess = updatedUser => {\n    setCurrentUser(updatedUser);\n    localStorage.setItem('currentUser', JSON.stringify(updatedUser)); // Update persisted user data\n    setCurrentScreen('preview'); // After team selection, go to preview\n  };\n\n  /**\r\n   * Callback function to start the game from the preview screen.\r\n   * Transitions to the game screen.\r\n   */\n  const handleStartGame = () => {\n    setCurrentScreen('game'); // Transition to the game screen\n  };\n\n  /**\r\n   * Callback function for when a game ends.\r\n   * Saves the game result and transitions to the result screen.\r\n   * @param {number} finalScore - The final score achieved in the game.\r\n   * @param {string} reason - The reason the game ended (e.g., 'win', 'lose', 'walk_away', 'time_up').\r\n   */\n  const handleGameEnd = (finalScore, reason) => {\n    console.log(`Game ended. Final Score: ${finalScore}, Reason: ${reason}`);\n    setLatestGameResult({\n      score: finalScore,\n      reason: reason,\n      timestamp: new Date().toISOString()\n    });\n    setCurrentScreen('result'); // Transition to the result screen\n  };\n\n  /**\r\n   * Callback function to update the user's score on the backend.\r\n   * This is called periodically during the game or at key events.\r\n   * @param {Object} scoreData - Object containing user ID, score, question number, and game status.\r\n   */\n  const handleScoreUpdate = async scoreData => {\n    console.log('App.jsx - Sending score update to backend:', scoreData);\n    // In a real application, you would make an API call here:\n    // try {\n    //   const response = await updateGameScore(scoreData); // You'll create this API function\n    //   if (response.success) {\n    //     console.log('Score updated successfully on backend.');\n    //     // Optionally update currentUser with new totalScore if backend returns it\n    //     if (response.user) {\n    //       setCurrentUser(response.user);\n    //       localStorage.setItem('currentUser', JSON.stringify(response.user));\n    //     }\n    //   } else {\n    //     console.error('Failed to update score on backend:', response.message);\n    //   }\n    // } catch (error) {\n    //   console.error('Error updating score:', error);\n    //   setModalMessage('Error updating score. Please try again.');\n    //   setShowModal(true);\n    // }\n    // For now, just log:\n    console.log('Mock backend score update:', scoreData);\n  };\n\n  /**\r\n   * Callback function to navigate to the leaderboard screen.\r\n   */\n  const handleNavigateToLeaderboard = () => {\n    setCurrentScreen('leaderboard');\n  };\n\n  // Conditional rendering based on the currentScreen state\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [\" \", (() => {\n      switch (currentScreen) {\n        case 'login':\n          return /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLogin: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 20\n          }, this);\n        case 'teamSelection':\n          return /*#__PURE__*/_jsxDEV(TeamSelectionPage, {\n            currentUser: currentUser,\n            onTeamSelected: handleTeamSelectionSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 20\n          }, this);\n        case 'preview':\n          if (currentUser) {\n            return /*#__PURE__*/_jsxDEV(PreviewPage, {\n              currentUser: currentUser,\n              onStartGame: handleStartGame\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 22\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLogin: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 20\n          }, this);\n        // Fallback if currentUser is null\n        case 'game':\n          if (currentUser) {\n            return /*#__PURE__*/_jsxDEV(GamePage, {\n              currentUser: currentUser,\n              onGameEnd: handleGameEnd,\n              onScoreUpdate: handleScoreUpdate,\n              onNavigateToLeaderboard: handleNavigateToLeaderboard\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 17\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLogin: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 20\n          }, this);\n        // Fallback\n        case 'result':\n          // You will replace this placeholder with your ResultPage component\n          // return <ResultPage currentUser={currentUser} gameResult={latestGameResult} onShare={handleShareResult} onPlayAgain={handlePlayAgain} />;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"app-main-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Result Screen Placeholder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Game ended for \", currentUser === null || currentUser === void 0 ? void 0 : currentUser.username, \".\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this), latestGameResult && /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Final Score: \", latestGameResult.score, \" $PROVE (Reason: \", latestGameResult.reason, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"primary-button\",\n              onClick: () => setCurrentScreen('leaderboard'),\n              children: \"Go to Leaderboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"secondary-button\",\n              onClick: () => setCurrentScreen('preview'),\n              children: \"Play Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 15\n          }, this);\n        case 'leaderboard':\n          // You will replace this placeholder with your LeaderboardPage component\n          // return <LeaderboardPage currentUser={currentUser} />;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"app-main-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Leaderboard Screen Placeholder\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Leaderboard for \", currentUser === null || currentUser === void 0 ? void 0 : currentUser.username, \".\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"primary-button\",\n              onClick: () => setCurrentScreen('login'),\n              children: \"Start Over\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this);\n        default:\n          return /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLogin: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 20\n          }, this);\n      }\n    })(), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onClose: () => setShowModal(false),\n      message: modalMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Pv8Op8eKtiAevPLlAJ+mzJpK1BY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LoginPage","TeamSelectionPage","PreviewPage","GamePage","Modal","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","currentScreen","setCurrentScreen","latestGameResult","setLatestGameResult","showModal","setShowModal","modalMessage","setModalMessage","storedUser","JSON","parse","localStorage","getItem","id","username","team","name","error","console","removeItem","handleLoginSuccess","userData","setItem","stringify","handleTeamSelectionSuccess","updatedUser","handleStartGame","handleGameEnd","finalScore","reason","log","score","timestamp","Date","toISOString","handleScoreUpdate","scoreData","handleNavigateToLeaderboard","className","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","onTeamSelected","onStartGame","onGameEnd","onScoreUpdate","onNavigateToLeaderboard","onClick","show","onClose","message","_c","$RefreshReg$"],"sources":["C:/Users/HELLO/Desktop/provernaire-game/frontend/src/App.jsx"],"sourcesContent":["// frontend/src/App.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport LoginPage from './pages/LoginPage';\r\nimport TeamSelectionPage from './pages/TeamSelectionPage';\r\nimport PreviewPage from './pages/PreviewPage';\r\nimport GamePage from './pages/GamePage';\r\n// import ResultPage from './pages/ResultPage'; // Uncomment when created\r\n// import LeaderboardPage from './pages/LeaderboardPage'; // Uncomment when created\r\nimport './App.css'; // Global CSS for the overall app layout/body\r\nimport Modal from './components/Modal/Modal'; // Import the Modal component\r\n\r\n/**\r\n * App Component\r\n * This is the main application component that handles routing/flow\r\n * between different screens based on user authentication and game state.\r\n */\r\nconst App = () => {\r\n  // State to hold the current user's data (username, pfpUrl, team, etc.)\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  // State to manage the currently active screen/page\r\n  const [currentScreen, setCurrentScreen] = useState('login'); // Initial screen\r\n  // State to store the result of the last game played\r\n  const [latestGameResult, setLatestGameResult] = useState(null);\r\n\r\n  // Modal states for global messages\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalMessage, setModalMessage] = useState('');\r\n\r\n  // Effect to load user data from local storage on initial app load\r\n  useEffect(() => {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser && storedUser.id && storedUser.username) { // Basic validation\r\n        setCurrentUser(storedUser);\r\n        // Determine initial screen based on stored user data\r\n        if (storedUser.team && storedUser.team.name) {\r\n          setCurrentScreen('preview'); // If user has team, go to preview\r\n        } else {\r\n          setCurrentScreen('teamSelection'); // If user logged in but no team, go to team selection\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to parse user data from localStorage:\", error);\r\n      localStorage.removeItem('currentUser'); // Clear invalid data\r\n      setCurrentScreen('login'); // Fallback to login\r\n    }\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  /**\r\n   * Callback function for successful login/registration.\r\n   * Updates the current user state and persists it to local storage.\r\n   * Transitions to the team selection screen.\r\n   * @param {Object} userData - The user object returned from the backend after login/registration.\r\n   */\r\n  const handleLoginSuccess = (userData) => {\r\n    setCurrentUser(userData);\r\n    localStorage.setItem('currentUser', JSON.stringify(userData)); // Persist user data\r\n    // After login, check if user already has a team.\r\n    if (userData.team && userData.team.name) {\r\n      setCurrentScreen('preview'); // If user has team, go to preview\r\n    } else {\r\n      setCurrentScreen('teamSelection'); // If new user or no team, go to team selection\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Callback function for successful team selection.\r\n   * Updates the current user state with the new team information and persists it.\r\n   * Transitions to the preview screen.\r\n   * @param {Object} updatedUser - The user object with updated team information.\r\n   */\r\n  const handleTeamSelectionSuccess = (updatedUser) => {\r\n    setCurrentUser(updatedUser);\r\n    localStorage.setItem('currentUser', JSON.stringify(updatedUser)); // Update persisted user data\r\n    setCurrentScreen('preview'); // After team selection, go to preview\r\n  };\r\n\r\n  /**\r\n   * Callback function to start the game from the preview screen.\r\n   * Transitions to the game screen.\r\n   */\r\n  const handleStartGame = () => {\r\n    setCurrentScreen('game'); // Transition to the game screen\r\n  };\r\n\r\n  /**\r\n   * Callback function for when a game ends.\r\n   * Saves the game result and transitions to the result screen.\r\n   * @param {number} finalScore - The final score achieved in the game.\r\n   * @param {string} reason - The reason the game ended (e.g., 'win', 'lose', 'walk_away', 'time_up').\r\n   */\r\n  const handleGameEnd = (finalScore, reason) => {\r\n    console.log(`Game ended. Final Score: ${finalScore}, Reason: ${reason}`);\r\n    setLatestGameResult({ score: finalScore, reason: reason, timestamp: new Date().toISOString() });\r\n    setCurrentScreen('result'); // Transition to the result screen\r\n  };\r\n\r\n  /**\r\n   * Callback function to update the user's score on the backend.\r\n   * This is called periodically during the game or at key events.\r\n   * @param {Object} scoreData - Object containing user ID, score, question number, and game status.\r\n   */\r\n  const handleScoreUpdate = async (scoreData) => {\r\n    console.log('App.jsx - Sending score update to backend:', scoreData);\r\n    // In a real application, you would make an API call here:\r\n    // try {\r\n    //   const response = await updateGameScore(scoreData); // You'll create this API function\r\n    //   if (response.success) {\r\n    //     console.log('Score updated successfully on backend.');\r\n    //     // Optionally update currentUser with new totalScore if backend returns it\r\n    //     if (response.user) {\r\n    //       setCurrentUser(response.user);\r\n    //       localStorage.setItem('currentUser', JSON.stringify(response.user));\r\n    //     }\r\n    //   } else {\r\n    //     console.error('Failed to update score on backend:', response.message);\r\n    //   }\r\n    // } catch (error) {\r\n    //   console.error('Error updating score:', error);\r\n    //   setModalMessage('Error updating score. Please try again.');\r\n    //   setShowModal(true);\r\n    // }\r\n    // For now, just log:\r\n    console.log('Mock backend score update:', scoreData);\r\n  };\r\n\r\n  /**\r\n   * Callback function to navigate to the leaderboard screen.\r\n   */\r\n  const handleNavigateToLeaderboard = () => {\r\n    setCurrentScreen('leaderboard');\r\n  };\r\n\r\n  // Conditional rendering based on the currentScreen state\r\n  return (\r\n    <div className=\"app-container\"> {/* Main container for the whole app */}\r\n      {/* Render the appropriate page based on currentScreen state */}\r\n      {(() => {\r\n        switch (currentScreen) {\r\n          case 'login':\r\n            return <LoginPage onLogin={handleLoginSuccess} />;\r\n          case 'teamSelection':\r\n            return <TeamSelectionPage currentUser={currentUser} onTeamSelected={handleTeamSelectionSuccess} />;\r\n          case 'preview':\r\n            if (currentUser) {\r\n              return <PreviewPage currentUser={currentUser} onStartGame={handleStartGame} />;\r\n            }\r\n            return <LoginPage onLogin={handleLoginSuccess} />; // Fallback if currentUser is null\r\n          case 'game':\r\n            if (currentUser) {\r\n              return (\r\n                <GamePage\r\n                  currentUser={currentUser}\r\n                  onGameEnd={handleGameEnd}\r\n                  onScoreUpdate={handleScoreUpdate}\r\n                  onNavigateToLeaderboard={handleNavigateToLeaderboard}\r\n                />\r\n              );\r\n            }\r\n            return <LoginPage onLogin={handleLoginSuccess} />; // Fallback\r\n          case 'result':\r\n            // You will replace this placeholder with your ResultPage component\r\n            // return <ResultPage currentUser={currentUser} gameResult={latestGameResult} onShare={handleShareResult} onPlayAgain={handlePlayAgain} />;\r\n            return (\r\n              <div className=\"app-main-content\">\r\n                <h1>Result Screen Placeholder</h1>\r\n                <p>Game ended for {currentUser?.username}.</p>\r\n                {latestGameResult && (\r\n                  <p>Final Score: {latestGameResult.score} $PROVE (Reason: {latestGameResult.reason})</p>\r\n                )}\r\n                <button className=\"primary-button\" onClick={() => setCurrentScreen('leaderboard')}>Go to Leaderboard</button>\r\n                <button className=\"secondary-button\" onClick={() => setCurrentScreen('preview')}>Play Again</button>\r\n              </div>\r\n            );\r\n          case 'leaderboard':\r\n            // You will replace this placeholder with your LeaderboardPage component\r\n            // return <LeaderboardPage currentUser={currentUser} />;\r\n            return (\r\n              <div className=\"app-main-content\">\r\n                <h1>Leaderboard Screen Placeholder</h1>\r\n                <p>Leaderboard for {currentUser?.username}.</p>\r\n                <button className=\"primary-button\" onClick={() => setCurrentScreen('login')}>Start Over</button>\r\n              </div>\r\n            );\r\n          default:\r\n            return <LoginPage onLogin={handleLoginSuccess} />;\r\n        }\r\n      })()}\r\n\r\n      {/* Global Modal for app-wide messages */}\r\n      <Modal show={showModal} onClose={() => setShowModal(false)} message={modalMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}