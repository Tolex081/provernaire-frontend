{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HELLO\\\\Desktop\\\\provernaire-game\\\\frontend\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\n// frontend/src/App.jsx\nimport React, { useState, useEffect } from 'react';\nimport LoginPage from './pages/LoginPage';\nimport TeamSelectionPage from './pages/TeamSelectionPage';\nimport PreviewPage from './pages/PreviewPage';\nimport GamePage from './pages/GamePage';\nimport ResultPage from './pages/ResultPage';\nimport LeaderboardPage from './pages/LeaderboardPage';\nimport './App.css'; // Global CSS for the overall app layout/body\nimport Modal from './components/Modal/Modal'; // Import the Modal component\n\n/**\r\n * App Component\r\n * This is the main application component that handles routing/flow\r\n * between different screens based on user authentication and game state.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to hold the current user's data (username, pfpUrl, team, etc.)\n  const [currentUser, setCurrentUser] = useState(null);\n  // State to manage the currently active screen/page\n  const [currentScreen, setCurrentScreen] = useState('login'); // Initial screen\n  // State to store the result of the last game played\n  const [latestGameResult, setLatestGameResult] = useState(null);\n\n  // Modal states for global messages\n  const [showModal, setShowModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState('');\n\n  // Effect to load user data from local storage on initial app load\n  useEffect(() => {\n    try {\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\n      if (storedUser && storedUser._id) {\n        // Check for _id from backend\n        // Map backend's _id to frontend's id for consistency\n        setCurrentUser({\n          ...storedUser,\n          id: storedUser._id\n        });\n        // Determine initial screen based on stored user data\n        if (storedUser.team && storedUser.team.name) {\n          setCurrentScreen('preview'); // If user has team, go to preview\n        } else {\n          setCurrentScreen('teamSelection'); // If user logged in but no team, go to team selection\n        }\n      } else {\n        setCurrentScreen('login'); // Fallback if no valid user data\n      }\n    } catch (error) {\n      console.error(\"Failed to parse user data from localStorage:\", error);\n      localStorage.removeItem('currentUser'); // Clear invalid data\n      setCurrentScreen('login'); // Fallback to login\n    }\n  }, []); // Empty dependency array means this runs once on mount\n\n  /**\r\n   * Callback function for successful login/registration.\r\n   * Updates the current user state and persists it to local storage.\r\n   * Transitions to the team selection screen.\r\n   * @param {Object} userData - The user object returned from the backend after login/registration.\r\n   */\n  const handleLoginSuccess = userData => {\n    // Map backend's _id to frontend's id for consistency\n    const userWithFrontendId = {\n      ...userData,\n      id: userData._id\n    };\n    setCurrentUser(userWithFrontendId);\n    localStorage.setItem('currentUser', JSON.stringify(userWithFrontendId)); // Persist user data\n    // After login, check if user already has a team.\n    if (userData.team && userData.team.name) {\n      setCurrentScreen('preview'); // If user has team, go to preview\n    } else {\n      setCurrentScreen('teamSelection'); // If new user or no team, go to team selection\n    }\n  };\n\n  /**\r\n   * Callback function for successful team selection.\r\n   * Updates the current user state with the new team information and persists it.\r\n   * Transitions to the preview screen.\r\n   * @param {Object} updatedUser - The user object with updated team information.\r\n   */\n  const handleTeamSelectionSuccess = updatedUser => {\n    // Ensure updatedUser also has 'id' if it's coming from a backend response directly\n    const userToSet = updatedUser.id ? updatedUser : {\n      ...updatedUser,\n      id: updatedUser._id\n    };\n    setCurrentUser(userToSet);\n    localStorage.setItem('currentUser', JSON.stringify(userToSet)); // Update persisted user data\n    setCurrentScreen('preview'); // After team selection, go to preview\n  };\n\n  /**\r\n   * Callback function to start the game from the preview screen.\r\n   * Transitions to the game screen.\r\n   */\n  const handleStartGame = () => {\n    setCurrentScreen('game'); // Transition to the game screen\n  };\n\n  /**\r\n   * Callback function for when a game ends.\r\n   * Saves the game result and transitions to the result screen.\r\n   * @param {number} finalScore - The final score achieved in the game.\r\n   * @param {string} reason - The reason the game ended (e.g., 'win', 'lose', 'walk_away', 'time_up').\r\n   */\n  const handleGameEnd = (finalScore, reason) => {\n    console.log(`Game ended. Final Score: ${finalScore}, Reason: ${reason}`);\n    setLatestGameResult({\n      score: finalScore,\n      reason: reason,\n      timestamp: new Date().toISOString()\n    });\n    setCurrentScreen('result'); // Transition to the result screen\n  };\n\n  /**\r\n   * Callback function to update the user's score on the backend.\r\n   * This is called periodically during the game or at key events.\r\n   * @param {Object} scoreData - Object containing user ID, score, question number, and game status.\r\n   */\n  const handleScoreUpdate = async scoreData => {\n    console.log('App.jsx - Sending score update to backend:', scoreData);\n    // In a real application, you would make an API call here:\n    // try {\n    //   const response = await updateGameScore(scoreData); // You'll create this API function\n    //   if (response.success) {\n    //     console.log('Score updated successfully on backend.');\n    //     // Optionally update currentUser with new totalScore if backend returns it\n    //     if (response.user) {\n    //       // Ensure the user object from backend also has 'id' mapped from '_id'\n    //       const updatedUser = { ...response.user, id: response.user._id };\n    //       setCurrentUser(updatedUser);\n    //       localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n    //     }\n    //   } else {\n    //     console.error('Failed to update score on backend:', response.message);\n    //   }\n    // } catch (error) {\n    //   console.error('Error updating score:', error);\n    //   setModalMessage('Error updating score. Please try again.');\n    //   setShowModal(true);\n    // }\n    // For now, just log:\n    console.log('Mock backend score update:', scoreData);\n  };\n\n  /**\r\n   * Callback function to navigate to the leaderboard screen.\r\n   */\n  const handleNavigateToLeaderboard = () => {\n    setCurrentScreen('leaderboard');\n  };\n\n  /**\r\n   * Callback function to handle playing the game again.\r\n   * Resets game state and navigates to the preview page.\r\n   */\n  const handlePlayAgain = () => {\n    setLatestGameResult(null); // Clear previous result\n    setCurrentScreen('preview'); // Go back to preview to start a new game\n  };\n\n  // Conditional rendering based on the currentScreen state\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [\" \", (() => {\n      switch (currentScreen) {\n        case 'login':\n          return /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLogin: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 20\n          }, this);\n        case 'teamSelection':\n          return /*#__PURE__*/_jsxDEV(TeamSelectionPage, {\n            currentUser: currentUser,\n            onTeamSelected: handleTeamSelectionSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 20\n          }, this);\n        case 'preview':\n          if (currentUser) {\n            return /*#__PURE__*/_jsxDEV(PreviewPage, {\n              currentUser: currentUser,\n              onStartGame: handleStartGame\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 22\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLogin: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 20\n          }, this);\n        // Fallback if currentUser is null\n        case 'game':\n          if (currentUser) {\n            return /*#__PURE__*/_jsxDEV(GamePage, {\n              currentUser: currentUser,\n              onGameEnd: handleGameEnd,\n              onScoreUpdate: handleScoreUpdate,\n              onNavigateToLeaderboard: handleNavigateToLeaderboard\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLogin: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 20\n          }, this);\n        // Fallback\n        case 'result':\n          if (currentUser && latestGameResult) {\n            return /*#__PURE__*/_jsxDEV(ResultPage, {\n              currentUser: currentUser,\n              gameResult: latestGameResult,\n              onPlayAgain: handlePlayAgain,\n              onNavigateToLeaderboard: handleNavigateToLeaderboard,\n              onScoreUpdate: handleScoreUpdate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLogin: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 20\n          }, this);\n        // Fallback if no user or result\n        case 'leaderboard':\n          if (currentUser) {\n            return /*#__PURE__*/_jsxDEV(LeaderboardPage, {\n              currentUser: currentUser,\n              onBackToGame: handlePlayAgain // Use handlePlayAgain to go back to preview\n              ,\n              isVisible: currentScreen === 'leaderboard' // Pass visibility prop\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 17\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLogin: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 20\n          }, this);\n        // Fallback\n        default:\n          return /*#__PURE__*/_jsxDEV(LoginPage, {\n            onLogin: handleLoginSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 20\n          }, this);\n      }\n    })(), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onClose: () => setShowModal(false),\n      message: modalMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Pv8Op8eKtiAevPLlAJ+mzJpK1BY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LoginPage","TeamSelectionPage","PreviewPage","GamePage","ResultPage","LeaderboardPage","Modal","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","currentScreen","setCurrentScreen","latestGameResult","setLatestGameResult","showModal","setShowModal","modalMessage","setModalMessage","storedUser","JSON","parse","localStorage","getItem","_id","id","team","name","error","console","removeItem","handleLoginSuccess","userData","userWithFrontendId","setItem","stringify","handleTeamSelectionSuccess","updatedUser","userToSet","handleStartGame","handleGameEnd","finalScore","reason","log","score","timestamp","Date","toISOString","handleScoreUpdate","scoreData","handleNavigateToLeaderboard","handlePlayAgain","className","children","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","onTeamSelected","onStartGame","onGameEnd","onScoreUpdate","onNavigateToLeaderboard","gameResult","onPlayAgain","onBackToGame","isVisible","show","onClose","message","_c","$RefreshReg$"],"sources":["C:/Users/HELLO/Desktop/provernaire-game/frontend/src/App.jsx"],"sourcesContent":["// frontend/src/App.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport LoginPage from './pages/LoginPage';\r\nimport TeamSelectionPage from './pages/TeamSelectionPage';\r\nimport PreviewPage from './pages/PreviewPage';\r\nimport GamePage from './pages/GamePage';\r\nimport ResultPage from './pages/ResultPage';\r\nimport LeaderboardPage from './pages/LeaderboardPage';\r\nimport './App.css'; // Global CSS for the overall app layout/body\r\nimport Modal from './components/Modal/Modal'; // Import the Modal component\r\n\r\n/**\r\n * App Component\r\n * This is the main application component that handles routing/flow\r\n * between different screens based on user authentication and game state.\r\n */\r\nconst App = () => {\r\n  // State to hold the current user's data (username, pfpUrl, team, etc.)\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  // State to manage the currently active screen/page\r\n  const [currentScreen, setCurrentScreen] = useState('login'); // Initial screen\r\n  // State to store the result of the last game played\r\n  const [latestGameResult, setLatestGameResult] = useState(null);\r\n\r\n  // Modal states for global messages\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalMessage, setModalMessage] = useState('');\r\n\r\n  // Effect to load user data from local storage on initial app load\r\n  useEffect(() => {\r\n    try {\r\n      const storedUser = JSON.parse(localStorage.getItem('currentUser'));\r\n      if (storedUser && storedUser._id) { // Check for _id from backend\r\n        // Map backend's _id to frontend's id for consistency\r\n        setCurrentUser({ ...storedUser, id: storedUser._id });\r\n        // Determine initial screen based on stored user data\r\n        if (storedUser.team && storedUser.team.name) {\r\n          setCurrentScreen('preview'); // If user has team, go to preview\r\n        } else {\r\n          setCurrentScreen('teamSelection'); // If user logged in but no team, go to team selection\r\n        }\r\n      } else {\r\n        setCurrentScreen('login'); // Fallback if no valid user data\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to parse user data from localStorage:\", error);\r\n      localStorage.removeItem('currentUser'); // Clear invalid data\r\n      setCurrentScreen('login'); // Fallback to login\r\n    }\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  /**\r\n   * Callback function for successful login/registration.\r\n   * Updates the current user state and persists it to local storage.\r\n   * Transitions to the team selection screen.\r\n   * @param {Object} userData - The user object returned from the backend after login/registration.\r\n   */\r\n  const handleLoginSuccess = (userData) => {\r\n    // Map backend's _id to frontend's id for consistency\r\n    const userWithFrontendId = { ...userData, id: userData._id };\r\n    setCurrentUser(userWithFrontendId);\r\n    localStorage.setItem('currentUser', JSON.stringify(userWithFrontendId)); // Persist user data\r\n    // After login, check if user already has a team.\r\n    if (userData.team && userData.team.name) {\r\n      setCurrentScreen('preview'); // If user has team, go to preview\r\n    } else {\r\n      setCurrentScreen('teamSelection'); // If new user or no team, go to team selection\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Callback function for successful team selection.\r\n   * Updates the current user state with the new team information and persists it.\r\n   * Transitions to the preview screen.\r\n   * @param {Object} updatedUser - The user object with updated team information.\r\n   */\r\n  const handleTeamSelectionSuccess = (updatedUser) => {\r\n    // Ensure updatedUser also has 'id' if it's coming from a backend response directly\r\n    const userToSet = updatedUser.id ? updatedUser : { ...updatedUser, id: updatedUser._id };\r\n    setCurrentUser(userToSet);\r\n    localStorage.setItem('currentUser', JSON.stringify(userToSet)); // Update persisted user data\r\n    setCurrentScreen('preview'); // After team selection, go to preview\r\n  };\r\n\r\n  /**\r\n   * Callback function to start the game from the preview screen.\r\n   * Transitions to the game screen.\r\n   */\r\n  const handleStartGame = () => {\r\n    setCurrentScreen('game'); // Transition to the game screen\r\n  };\r\n\r\n  /**\r\n   * Callback function for when a game ends.\r\n   * Saves the game result and transitions to the result screen.\r\n   * @param {number} finalScore - The final score achieved in the game.\r\n   * @param {string} reason - The reason the game ended (e.g., 'win', 'lose', 'walk_away', 'time_up').\r\n   */\r\n  const handleGameEnd = (finalScore, reason) => {\r\n    console.log(`Game ended. Final Score: ${finalScore}, Reason: ${reason}`);\r\n    setLatestGameResult({ score: finalScore, reason: reason, timestamp: new Date().toISOString() });\r\n    setCurrentScreen('result'); // Transition to the result screen\r\n  };\r\n\r\n  /**\r\n   * Callback function to update the user's score on the backend.\r\n   * This is called periodically during the game or at key events.\r\n   * @param {Object} scoreData - Object containing user ID, score, question number, and game status.\r\n   */\r\n  const handleScoreUpdate = async (scoreData) => {\r\n    console.log('App.jsx - Sending score update to backend:', scoreData);\r\n    // In a real application, you would make an API call here:\r\n    // try {\r\n    //   const response = await updateGameScore(scoreData); // You'll create this API function\r\n    //   if (response.success) {\r\n    //     console.log('Score updated successfully on backend.');\r\n    //     // Optionally update currentUser with new totalScore if backend returns it\r\n    //     if (response.user) {\r\n    //       // Ensure the user object from backend also has 'id' mapped from '_id'\r\n    //       const updatedUser = { ...response.user, id: response.user._id };\r\n    //       setCurrentUser(updatedUser);\r\n    //       localStorage.setItem('currentUser', JSON.stringify(updatedUser));\r\n    //     }\r\n    //   } else {\r\n    //     console.error('Failed to update score on backend:', response.message);\r\n    //   }\r\n    // } catch (error) {\r\n    //   console.error('Error updating score:', error);\r\n    //   setModalMessage('Error updating score. Please try again.');\r\n    //   setShowModal(true);\r\n    // }\r\n    // For now, just log:\r\n    console.log('Mock backend score update:', scoreData);\r\n  };\r\n\r\n  /**\r\n   * Callback function to navigate to the leaderboard screen.\r\n   */\r\n  const handleNavigateToLeaderboard = () => {\r\n    setCurrentScreen('leaderboard');\r\n  };\r\n\r\n  /**\r\n   * Callback function to handle playing the game again.\r\n   * Resets game state and navigates to the preview page.\r\n   */\r\n  const handlePlayAgain = () => {\r\n    setLatestGameResult(null); // Clear previous result\r\n    setCurrentScreen('preview'); // Go back to preview to start a new game\r\n  };\r\n\r\n\r\n  // Conditional rendering based on the currentScreen state\r\n  return (\r\n    <div className=\"app-container\"> {/* Main container for the whole app */}\r\n      {/* Render the appropriate page based on currentScreen state */}\r\n      {(() => {\r\n        switch (currentScreen) {\r\n          case 'login':\r\n            return <LoginPage onLogin={handleLoginSuccess} />;\r\n          case 'teamSelection':\r\n            return <TeamSelectionPage currentUser={currentUser} onTeamSelected={handleTeamSelectionSuccess} />;\r\n          case 'preview':\r\n            if (currentUser) {\r\n              return <PreviewPage currentUser={currentUser} onStartGame={handleStartGame} />;\r\n            }\r\n            return <LoginPage onLogin={handleLoginSuccess} />; // Fallback if currentUser is null\r\n          case 'game':\r\n            if (currentUser) {\r\n              return (\r\n                <GamePage\r\n                  currentUser={currentUser}\r\n                  onGameEnd={handleGameEnd}\r\n                  onScoreUpdate={handleScoreUpdate}\r\n                  onNavigateToLeaderboard={handleNavigateToLeaderboard}\r\n                />\r\n              );\r\n            }\r\n            return <LoginPage onLogin={handleLoginSuccess} />; // Fallback\r\n          case 'result':\r\n            if (currentUser && latestGameResult) {\r\n              return (\r\n                <ResultPage\r\n                  currentUser={currentUser}\r\n                  gameResult={latestGameResult}\r\n                  onPlayAgain={handlePlayAgain}\r\n                  onNavigateToLeaderboard={handleNavigateToLeaderboard}\r\n                  onScoreUpdate={handleScoreUpdate}\r\n                />\r\n              );\r\n            }\r\n            return <LoginPage onLogin={handleLoginSuccess} />; // Fallback if no user or result\r\n          case 'leaderboard':\r\n            if (currentUser) {\r\n              return (\r\n                <LeaderboardPage\r\n                  currentUser={currentUser}\r\n                  onBackToGame={handlePlayAgain} // Use handlePlayAgain to go back to preview\r\n                  isVisible={currentScreen === 'leaderboard'} // Pass visibility prop\r\n                />\r\n              );\r\n            }\r\n            return <LoginPage onLogin={handleLoginSuccess} />; // Fallback\r\n          default:\r\n            return <LoginPage onLogin={handleLoginSuccess} />;\r\n        }\r\n      })()}\r\n\r\n      {/* Global Modal for app-wide messages */}\r\n      <Modal show={showModal} onClose={() => setShowModal(false)} message={modalMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}