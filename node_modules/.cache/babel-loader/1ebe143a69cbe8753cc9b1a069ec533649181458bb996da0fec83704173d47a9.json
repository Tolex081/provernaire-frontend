{"ast":null,"code":"// frontend/src/api/api.js\n// Centralized place for frontend API calls\n\n// Determine the API base URL based on the environment\n// In a real Vercel deployment, REACT_APP_API_URL would be set to your backend URL.\n// For local development, it might point to http://localhost:5000 (or your backend port).\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n/**\r\n * Registers or logs in a user.\r\n * Sends username and profile picture file to the backend.\r\n * @param {FormData} userData - FormData object containing 'username' and 'profilePicture' (File object).\r\n * @returns {Promise<Object>} - A promise that resolves to the backend response.\r\n */\nexport const registerUser = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: 'POST',\n      // When sending FormData, the 'Content-Type' header is automatically set to 'multipart/form-data'\n      // by the browser, so we don't explicitly set it here.\n      body: userData // Pass the FormData object directly\n    });\n\n    // Check if the response is OK (status code 200-299)\n    if (!response.ok) {\n      const errorData = await response.json();\n      // Throw an error with the backend's message for better error handling\n      throw new Error(errorData.message || 'Failed to register/login user.');\n    }\n    return await response.json(); // Parse and return the JSON response\n  } catch (error) {\n    console.error('API Error (registerUser):', error);\n    // Return a structured error object for the frontend to handle\n    return {\n      success: false,\n      message: error.message || 'Network error or server issue.'\n    };\n  }\n};\n\n/**\r\n * Sends the selected team to the backend to update the user's profile.\r\n * @param {string} userId - The ID of the user whose team is being selected.\r\n * @param {string} teamName - The name of the team selected by the user.\r\n * @returns {Promise<Object>} - A promise that resolves to the backend response.\r\n */\nexport const selectUserTeam = async (userId, teamName) => {\n  // <<< THIS IS THE CRUCIAL 'export' KEYWORD\n  try {\n    const response = await fetch(`${API_BASE_URL}/teams/select`, {\n      // New endpoint for team selection\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n        // You might add an Authorization header here if using JWT tokens for authenticated requests\n        // 'Authorization': `Bearer ${localStorage.getItem('token')}`\n      },\n      body: JSON.stringify({\n        userId,\n        teamName\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to select team.');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API Error (selectUserTeam):', error);\n    return {\n      success: false,\n      message: error.message || 'Network error or server issue.'\n    };\n  }\n};\n\n// You'll add more API functions here as you build out your application\n// export const getQuestions = async () => { ... };\n// export const submitAnswer = async (answerData) => { ... };\n// export const getLeaderboard = async () => { ... };\n// export const getScore = async (userId) => { ... };","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","registerUser","userData","response","fetch","method","body","ok","errorData","json","Error","message","error","console","success","selectUserTeam","userId","teamName","headers","JSON","stringify"],"sources":["C:/Users/HELLO/Desktop/provernaire-game/frontend/src/api/api.js"],"sourcesContent":["// frontend/src/api/api.js\r\n// Centralized place for frontend API calls\r\n\r\n// Determine the API base URL based on the environment\r\n// In a real Vercel deployment, REACT_APP_API_URL would be set to your backend URL.\r\n// For local development, it might point to http://localhost:5000 (or your backend port).\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n/**\r\n * Registers or logs in a user.\r\n * Sends username and profile picture file to the backend.\r\n * @param {FormData} userData - FormData object containing 'username' and 'profilePicture' (File object).\r\n * @returns {Promise<Object>} - A promise that resolves to the backend response.\r\n */\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n      method: 'POST',\r\n      // When sending FormData, the 'Content-Type' header is automatically set to 'multipart/form-data'\r\n      // by the browser, so we don't explicitly set it here.\r\n      body: userData, // Pass the FormData object directly\r\n    });\r\n\r\n    // Check if the response is OK (status code 200-299)\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      // Throw an error with the backend's message for better error handling\r\n      throw new Error(errorData.message || 'Failed to register/login user.');\r\n    }\r\n\r\n    return await response.json(); // Parse and return the JSON response\r\n  } catch (error) {\r\n    console.error('API Error (registerUser):', error);\r\n    // Return a structured error object for the frontend to handle\r\n    return { success: false, message: error.message || 'Network error or server issue.' };\r\n  }\r\n};\r\n\r\n/**\r\n * Sends the selected team to the backend to update the user's profile.\r\n * @param {string} userId - The ID of the user whose team is being selected.\r\n * @param {string} teamName - The name of the team selected by the user.\r\n * @returns {Promise<Object>} - A promise that resolves to the backend response.\r\n */\r\nexport const selectUserTeam = async (userId, teamName) => { // <<< THIS IS THE CRUCIAL 'export' KEYWORD\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/teams/select`, { // New endpoint for team selection\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        // You might add an Authorization header here if using JWT tokens for authenticated requests\r\n        // 'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n      },\r\n      body: JSON.stringify({ userId, teamName }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to select team.');\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('API Error (selectUserTeam):', error);\r\n    return { success: false, message: error.message || 'Network error or server issue.' };\r\n  }\r\n};\r\n\r\n// You'll add more API functions here as you build out your application\r\n// export const getQuestions = async () => { ... };\r\n// export const submitAnswer = async (answerData) => { ... };\r\n// export const getLeaderboard = async () => { ... };\r\n// export const getScore = async (userId) => { ... };\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,gBAAgB,EAAE;MAC5DQ,MAAM,EAAE,MAAM;MACd;MACA;MACAC,IAAI,EAAEJ,QAAQ,CAAE;IAClB,CAAC,CAAC;;IAEF;IACA,IAAI,CAACC,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvC;MACA,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,gCAAgC,CAAC;IACxE;IAEA,OAAO,MAAMR,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD;IACA,OAAO;MAAEE,OAAO,EAAE,KAAK;MAAEH,OAAO,EAAEC,KAAK,CAACD,OAAO,IAAI;IAAiC,CAAC;EACvF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,cAAc,GAAG,MAAAA,CAAOC,MAAM,EAAEC,QAAQ,KAAK;EAAE;EAC1D,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,eAAe,EAAE;MAAE;MAC7DQ,MAAM,EAAE,MAAM;MACda,OAAO,EAAE;QACP,cAAc,EAAE;QAChB;QACA;MACF,CAAC;MACDZ,IAAI,EAAEa,IAAI,CAACC,SAAS,CAAC;QAAEJ,MAAM;QAAEC;MAAS,CAAC;IAC3C,CAAC,CAAC;IAEF,IAAI,CAACd,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,wBAAwB,CAAC;IAChE;IAEA,OAAO,MAAMR,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO;MAAEE,OAAO,EAAE,KAAK;MAAEH,OAAO,EAAEC,KAAK,CAACD,OAAO,IAAI;IAAiC,CAAC;EACvF;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}